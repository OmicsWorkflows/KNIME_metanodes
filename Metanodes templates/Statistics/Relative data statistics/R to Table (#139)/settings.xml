<?xml version="1.0" encoding="UTF-8"?>
<config xmlns="http://www.knime.org/2008/09/XMLConfig" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.knime.org/2008/09/XMLConfig http://www.knime.org/XMLConfig_2008_09.xsd" key="settings.xml">
    <entry key="node_file" type="xstring" value="settings.xml"/>
    <config key="flow_stack"/>
    <config key="internal_node_subsettings">
        <entry key="memory_policy" type="xstring" value="CacheSmallInMemory"/>
    </config>
    <config key="model">
        <entry key="script" type="xstring" value="library(tibble)%%00010library(dplyr)%%00010library(tidyr)%%00010%%00010if(is.data.frame(pair_comparisons)) {%%00010%%00009if(knime.flow.in[['CompGlob']] == 1) {%%00010%%00009%%00009output_list &lt;- lapply(names(stat), function(x){%%00010%%00009%%00009%%00009tmp &lt;- stat[[x]]%%00010%%00009%%00009%%00009colnames(tmp) &lt;- paste(x, colnames(tmp), sep = ';')%%00010%%00009%%00009%%00009return(tmp)%%00010%%00009%%00009})%%00010%%00009%%00010%%00009%%00009output &lt;- as.data.frame(unname(output_list), check.names = FALSE, make.names = FALSE)%%00010%%00009%%00010%%00009%%00009output_t &lt;- t(output) |&gt;%%00010%%00009%%00009%%00009as.data.frame() |&gt;%%00010%%00009%%00009%%00009rownames_to_column('Sequence')%%00010%%00009%%00009%%00009knime.out &lt;- output_t%%00010%%00009%%00009%%00010%%00009} else if (knime.flow.in[[&quot;CompPairs&quot;]] == 1) {%%00010%%00009%%00009ol &lt;- lapply(names(stat), function(x) {%%00010%%00009%%00009%%00009tmp &lt;- stat[[x]]%%00010%%00009%%00009%%00009dl &lt;- lapply(names(tmp), function(y) {%%00010%%00009%%00009%%00009%%00009if(y != 'anova') {%%00010%%00009%%00009%%00009%%00009%%00009tmp[[y]] |&gt;%%00010%%00009%%00009%%00009%%00009%%00009%%00009as.data.frame() |&gt;%%00010%%00009%%00009%%00009%%00009%%00009%%00009mutate(Sequence = x) |&gt;%%00010%%00009%%00009%%00009%%00009%%00009%%00009rownames_to_column('Contrast') |&gt;%%00010%%00009%%00009%%00009%%00009%%00009%%00009gather(-Sequence, -Contrast, key = 'Modification', value = 'p-value') |&gt;%%00010%%00009%%00009%%00009%%00009%%00009%%00009mutate(Statistic = y)%%00010%%00009%%00009%%00009%%00009} else {%%00010%%00009%%00009%%00009%%00009%%00009tmp[[y]] |&gt;%%00010%%00009%%00009%%00009%%00009%%00009%%00009t() |&gt;%%00010%%00009%%00009%%00009%%00009%%00009%%00009as.data.frame() |&gt;%%00010%%00009%%00009%%00009%%00009%%00009%%00009mutate(Sequence = x,%%00010%%00009%%00009%%00009%%00009%%00009%%00009%%00009  Contrast = 'all') |&gt;%%00010%%00009%%00009%%00009%%00009%%00009%%00009gather(-Sequence, -Contrast, key = 'Modification', value = 'p-value') |&gt;%%00010%%00009%%00009%%00009%%00009%%00009%%00009mutate(Statistic = y)%%00010%%00009%%00009%%00009%%00009}%%00010%%00009%%00009%%00009})%%00010%%00009%%00009%%00009return(do.call(rbind, dl))%%00010%%00009%%00009})%%00010%%00010%%00009%%00009output &lt;- do.call(rbind, ol) |&gt;%%00010%%00009%%00009%%00009mutate(Statistic = case_when(Statistic == 'p' ~ 't-test',%%00010%%00009%%00009%%00009%%00009%%00009%%00009%%00009%%00009    Statistic == 'padj' ~ 't-test (BH correction)',%%00010%%00009%%00009%%00009%%00009%%00009%%00009%%00009%%00009    Statistic == 'anova' ~ 'ANOVA',%%00010%%00009%%00009%%00009%%00009%%00009%%00009%%00009%%00009    Statistic == 'tukey' ~ 'TukeyHSD'))%%00010%%00010%%00009%%00009knime.out &lt;- output%%00010%%00009%%00009%%00010%%00009} else {%%00010%%00009%%00009ol &lt;- lapply(names(stat), function(x) {%%00010%%00009%%00009%%00009tmp &lt;- stat[[x]]%%00010%%00009%%00009%%00009dl &lt;- lapply(colnames(tmp), function(y) {%%00010%%00009%%00009%%00009%%00009tmp2 &lt;- tmp[,y]%%00010%%00009%%00009%%00009%%00009do.call(rbind, lapply(names(tmp2), function (z) {%%00010%%00009%%00009%%00009%%00009%%00009if(z != 'anova') {%%00010%%00009%%00009%%00009%%00009%%00009%%00009tmp2[[z]] |&gt;%%00010%%00009%%00009%%00009%%00009%%00009%%00009%%00009as.data.frame() |&gt;%%00010%%00009%%00009%%00009%%00009%%00009%%00009%%00009rename('p-value' = 'tmp2[[z]]') |&gt;%%00010%%00009%%00009%%00009%%00009%%00009%%00009%%00009mutate(Sequence = x,%%00010%%00009%%00009%%00009%%00009%%00009%%00009%%00009%%00009  Modification = y) |&gt;%%00010%%00009%%00009%%00009%%00009%%00009%%00009%%00009rownames_to_column('Contrast') |&gt;%%00010%%00009%%00009%%00009%%00009%%00009%%00009%%00009mutate(Statistic = z) |&gt;%%00010%%00009%%00009%%00009%%00009%%00009%%00009%%00009relocate('p-value', .before = Statistic) |&gt;%%00010%%00009%%00009%%00009%%00009%%00009%%00009%%00009relocate('Contrast', .after = Modification)%%00010%%00009%%00009%%00009%%00009%%00009} else {%%00010%%00009%%00009%%00009%%00009%%00009%%00009tmp2[[z]] |&gt;%%00010%%00009%%00009%%00009%%00009%%00009%%00009%%00009as.data.frame() |&gt;%%00010%%00009%%00009%%00009%%00009%%00009%%00009%%00009rename('p-value' = 'tmp2[[z]]') |&gt;%%00010%%00009%%00009%%00009%%00009%%00009%%00009%%00009mutate(Sequence = x,%%00010%%00009%%00009%%00009%%00009%%00009%%00009%%00009%%00009  Modification = y,%%00010%%00009%%00009%%00009%%00009%%00009%%00009%%00009%%00009  Contrast = 'all') |&gt;%%00010%%00009%%00009%%00009%%00009%%00009%%00009%%00009mutate(Statistic = z) |&gt;%%00010%%00009%%00009%%00009%%00009%%00009%%00009%%00009relocate('p-value', .before = Statistic)%%00010%%00009%%00009%%00009%%00009%%00009}%%00010%%00009%%00009%%00009%%00009}))%%00010%%00009%%00009%%00009})%%00010%%00009%%00009%%00009return(do.call(rbind, dl))%%00010%%00009%%00009})%%00010%%00010%%00009%%00009output &lt;- do.call(rbind, ol) |&gt;%%00010%%00009%%00009%%00009mutate(Statistic = case_when(Statistic == 'p' ~ 't-test',%%00010%%00009%%00009%%00009%%00009%%00009%%00009%%00009%%00009    Statistic == 'padj' ~ 't-test (BH correction)',%%00010%%00009%%00009%%00009%%00009%%00009%%00009%%00009%%00009    Statistic == 'anova' ~ 'ANOVA',%%00010%%00009%%00009%%00009%%00009%%00009%%00009%%00009%%00009    Statistic == 'tukey' ~ 'TukeyHSD'))%%00010%%00010%%00009%%00009knime.out &lt;- output%%00010%%00009}%%00010%%00010} else {%%00010%%00009knime.out &lt;- stat%%00010}"/>
        <entry key="templateUUID" type="xstring" isnull="true" value=""/>
        <entry key="version" type="xstring" value="version 1.x"/>
        <entry key="Output non numbers (NaN, Inf, -Inf) as missing cells" type="xboolean" value="false"/>
        <entry key="sendRowNames" type="xboolean" value="true"/>
        <entry key="sendBatchSize" type="xint" value="10000"/>
        <entry key="knimeInType" type="xstring" value="data.frame"/>
        <entry key="overwriteRHome" type="xboolean" value="false"/>
        <entry key="rHome" type="xstring" value="/home/knimeuser/.Renv/4.2.0/4.5.2a/lib/R"/>
        <entry key="useRPathHome" type="xboolean" value="true"/>
        <entry key="condaVariableName" type="xstring" isnull="true" value=""/>
    </config>
    <config key="variables">
        <entry key="version" type="xstring" value="V_2019_09_13"/>
        <config key="tree">
            <config key="rHome">
                <entry key="used_variable" type="xstring" value="Rcommand"/>
                <entry key="exposed_variable" type="xstring" isnull="true" value=""/>
            </config>
        </config>
    </config>
    <config key="nodeAnnotation">
        <entry key="text" type="xstring" value="p-value table"/>
        <entry key="bgcolor" type="xint" value="16777215"/>
        <entry key="x-coordinate" type="xint" value="1329"/>
        <entry key="y-coordinate" type="xint" value="599"/>
        <entry key="width" type="xint" value="142"/>
        <entry key="height" type="xint" value="17"/>
        <entry key="alignment" type="xstring" value="CENTER"/>
        <entry key="borderSize" type="xint" value="0"/>
        <entry key="borderColor" type="xint" value="16777215"/>
        <entry key="defFontSize" type="xint" value="10"/>
        <entry key="annotation-version" type="xint" value="20151123"/>
        <config key="styles">
            <config key="style_0">
                <entry key="start" type="xint" value="0"/>
                <entry key="length" type="xint" value="13"/>
                <entry key="fontname" type="xstring" value="Sans"/>
                <entry key="fontstyle" type="xint" value="0"/>
                <entry key="fontsize" type="xint" value="10"/>
                <entry key="fgcolor" type="xint" value="0"/>
            </config>
        </config>
    </config>
    <entry key="customDescription" type="xstring" isnull="true" value=""/>
    <entry key="state" type="xstring" value="IDLE"/>
    <entry key="factory" type="xstring" value="org.knime.r.RToTableNodeFactory"/>
    <entry key="node-name" type="xstring" value="R to Table"/>
    <entry key="node-bundle-name" type="xstring" value="KNIME R-Project nodes"/>
    <entry key="node-bundle-symbolic-name" type="xstring" value="org.knime.r"/>
    <entry key="node-bundle-vendor" type="xstring" value="KNIME AG, Zurich, Switzerland"/>
    <entry key="node-bundle-version" type="xstring" value="4.7.0.v202206271529"/>
    <entry key="node-feature-name" type="xstring" value="KNIME Interactive R Statistics Integration"/>
    <entry key="node-feature-symbolic-name" type="xstring" value="org.knime.features.r.feature.group"/>
    <entry key="node-feature-vendor" type="xstring" value="KNIME AG, Zurich, Switzerland"/>
    <entry key="node-feature-version" type="xstring" value="4.7.0.v202211090002"/>
    <config key="factory_settings"/>
    <entry key="name" type="xstring" value="R to Table"/>
    <entry key="hasContent" type="xboolean" value="false"/>
    <entry key="isInactive" type="xboolean" value="false"/>
    <config key="ports">
        <config key="port_1">
            <entry key="index" type="xint" value="1"/>
            <entry key="port_dir_location" type="xstring" isnull="true" value=""/>
        </config>
    </config>
    <config key="filestores">
        <entry key="file_store_location" type="xstring" isnull="true" value=""/>
        <entry key="file_store_id" type="xstring" isnull="true" value=""/>
    </config>
</config>
