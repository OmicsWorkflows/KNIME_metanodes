<?xml version="1.0" encoding="UTF-8"?>
<config xmlns="http://www.knime.org/2008/09/XMLConfig" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.knime.org/2008/09/XMLConfig http://www.knime.org/XMLConfig_2008_09.xsd" key="settings.xml">
<entry key="node_file" type="xstring" value="settings.xml"/>
<config key="flow_stack"/>
<config key="internal_node_subsettings">
<entry key="memory_policy" type="xstring" value="CacheSmallInMemory"/>
</config>
<config key="model">
<entry key="sourceCode" type="xstring" value="import numpy%%00010import pandas%%00010%%00010# creates lists from selected string vaiable based on the delimiter%%00010desing_list = flow_variables['design'].split(&quot;,&quot;)%%00010biol_replicates_list = flow_variables['biol_replicates'].split(&quot;,&quot;)%%00010tech_replicates_list = flow_variables['tech_replicates'].split(&quot;,&quot;)%%00010%%00010# check the length of all lists and the number of selected columns is the same%%00010if not len(input_table.columns) == len(biol_replicates_list) == len(desing_list):%%00010%%00009print(&quot;Number of selected columns and number of samples and or biological replicates does not match! Please inspect the input values.&quot;)%%00010%%00009quit()%%00010%%00010# creates array of values using the lists to be used to create MultiIndex dataframe header%%00010arrays = [numpy.array(desing_list),numpy.array(biol_replicates_list),numpy.array(tech_replicates_list)]%%00010%%00010# creates a copy of the input table%%00010data = input_table.copy()%%00010%%00010# changes the column names based on the arrays, i.e. using the specified design and biol./tech. repl. info%%00010data.columns = arrays%%00010%%00010# creates two extra dataframes where the bin values (0 or 1) are summed based on the MultiIndex level, %%00010## i.e. at first all technical replicates are summed together %%00010data_grouped_biol_repl = data.groupby(level=(0,1),axis=1).sum()%%00010## and then all technical and biological replicates are summed to get sample type level summary%%00010data_grouped_sample = data.groupby(level=(0),axis=1).sum()%%00010%%00010# changes the newly crated grouped dataframes column names to be single level only, i.e. compatible with KNIME%%00010data_grouped_biol_repl.columns = [''.join(i) for i in data_grouped_biol_repl.columns.tolist()]%%00010data_grouped_sample.columns = [''.join(i) for i in data_grouped_sample.columns.tolist()]%%00010%%00010# adds specified prefix and also suffix (the one specified for the binary matrix, plus &quot;_sum&quot;%%00010data_grouped_biol_repl.columns = [flow_variables['prefix_summary'] + str(col) + flow_variables['suffix_to_append'] + flow_variables['suffix_summary'] for col in data_grouped_biol_repl.columns]%%00010data_grouped_sample.columns = [flow_variables['prefix_summary'] + str(col) + flow_variables['suffix_to_append'] + flow_variables['suffix_summary'] for col in data_grouped_sample.columns]%%00010%%00010# combines the input_table dataframe with two summary dataframes on biological and sample type level%%00010output_table = pandas.concat([input_table,data_grouped_biol_repl, data_grouped_sample], axis=1, sort=False)"/>
<entry key="rowLimit" type="xint" value="1000"/>
<entry key="pythonVersionOption" type="xstring" value="PYTHON3"/>
<entry key="convertMissingToPython" type="xboolean" value="false"/>
<entry key="convertMissingFromPython" type="xboolean" value="false"/>
<entry key="sentinelOption" type="xstring" value="MIN_VAL"/>
<entry key="sentinelValue" type="xint" value="0"/>
<entry key="chunkSize" type="xint" value="500000"/>
<entry key="python2Command" type="xstring" value=""/>
<entry key="python3Command" type="xstring" value=""/>
</config>
<config key="nodeAnnotation">
<entry key="text" type="xstring" value="adds summary columns %%00010on biological replicate level %%00010and sample type level"/>
<entry key="bgcolor" type="xint" value="16777215"/>
<entry key="x-coordinate" type="xint" value="608"/>
<entry key="y-coordinate" type="xint" value="619"/>
<entry key="width" type="xint" value="184"/>
<entry key="height" type="xint" value="51"/>
<entry key="alignment" type="xstring" value="CENTER"/>
<entry key="borderSize" type="xint" value="0"/>
<entry key="borderColor" type="xint" value="16777215"/>
<entry key="defFontSize" type="xint" value="10"/>
<entry key="annotation-version" type="xint" value="20151123"/>
<config key="styles"/>
</config>
<entry key="customDescription" type="xstring" isnull="true" value=""/>
<entry key="state" type="xstring" value="IDLE"/>
<entry key="factory" type="xstring" value="org.knime.python2.nodes.script.Python2ScriptNodeFactory"/>
<entry key="node-name" type="xstring" value="Python Script (1⇒1)"/>
<entry key="node-bundle-name" type="xstring" value="KNIME Python nodes"/>
<entry key="node-bundle-symbolic-name" type="xstring" value="org.knime.python2.nodes"/>
<entry key="node-bundle-vendor" type="xstring" value="KNIME AG, Zurich, Switzerland"/>
<entry key="node-bundle-version" type="xstring" value="3.7.2.v201904170931"/>
<entry key="node-feature-name" type="xstring" value="KNIME Python Integration"/>
<entry key="node-feature-symbolic-name" type="xstring" value="org.knime.features.python2.feature.group"/>
<entry key="node-feature-vendor" type="xstring" value="KNIME AG, Zurich, Switzerland"/>
<entry key="node-feature-version" type="xstring" value="3.7.2.v201904170931"/>
<config key="factory_settings"/>
<entry key="name" type="xstring" value="Python Script (1⇒1)"/>
<entry key="hasContent" type="xboolean" value="false"/>
<entry key="isInactive" type="xboolean" value="false"/>
<config key="ports">
<config key="port_1">
<entry key="index" type="xint" value="1"/>
<entry key="port_dir_location" type="xstring" isnull="true" value=""/>
</config>
</config>
<config key="filestores">
<entry key="file_store_location" type="xstring" isnull="true" value=""/>
<entry key="file_store_id" type="xstring" isnull="true" value=""/>
</config>
</config>
