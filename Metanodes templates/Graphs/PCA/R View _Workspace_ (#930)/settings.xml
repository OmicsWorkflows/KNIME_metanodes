<?xml version="1.0" encoding="UTF-8"?>
<config xmlns="http://www.knime.org/2008/09/XMLConfig" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.knime.org/2008/09/XMLConfig http://www.knime.org/XMLConfig_2008_09.xsd" key="settings.xml">
    <entry key="node_file" type="xstring" value="settings.xml"/>
    <config key="flow_stack"/>
    <config key="internal_node_subsettings">
        <entry key="memory_policy" type="xstring" value="CacheSmallInMemory"/>
    </config>
    <config key="model">
        <entry key="Image width" type="xint" value="640"/>
        <entry key="Image height" type="xint" value="640"/>
        <entry key="Image resolution" type="xstring" value="NA"/>
        <entry key="Image background color" type="xstring" value="#ffffff"/>
        <entry key="Text point size" type="xint" value="12"/>
        <config key="R settings">
            <entry key="script" type="xstring" value="####second node####%%00010library(ggplot2)%%00010library(ggrepel)%%00010%%00010# save output from PCA to variable df_out%%00010df_out &lt;- as.data.frame(res.pca$x)%%00010%%00010# create variables for point labelling %%00010if(knime.flow.in[[&quot;groups&quot;]] == &quot;&quot;){%%00010%%00009condition &lt;- rownames(df_out)%%00010%%00009legend &lt;- 0%%00010} else{%%00010%%00009condition &lt;- unlist(strsplit(knime.flow.in[[&quot;groups&quot;]], &quot;,&quot;))%%00010%%00009legend &lt;- 1%%00010%%00010%%00009if(knime.flow.in[[&quot;pca_rows_columns&quot;]] == &quot;rows&quot;){%%00010%%00009%%00009conditions_removed &lt;- as.numeric(unlist(strsplit(knime.flow.in[[&quot;removed_i&quot;]], &quot;,&quot;)))%%00010%%00009%%00009condition &lt;- condition[-conditions_removed]%%00010%%00009}%%00010}%%00010%%00010label &lt;- rownames(df_out)%%00010%%00010# modify variables for PCA plot%%00010df_out &lt;- cbind(label, condition, df_out)%%00010eig &lt;- res.pca$sdev^2%%00009              %%00009%%00009# eigenvalues%%00010variance &lt;- round(eig*100/sum(eig), 2)%%00009     # computing variance described by new axes%%00010percentage &lt;- paste(colnames(df_out[3:length(df_out)]), &quot; (&quot;,variance, &quot; %&quot;, &quot;)&quot;, sep=&quot;&quot;)%%00010tmp &lt;- paste(colnames(df_out[3:length(df_out)]), &quot; (&quot;, variance, &quot; %&quot;, &quot;)&quot;, sep = &quot;&quot;)%%00010%%00010if(top_N &lt; nrow(data_no_na) &amp; top_N!=0) {%%00010   title_text = paste0('Cases used for PCA: ', number_cases_PCA_based_on, ' most variable cases (standard deviation)\nData standardization: ', setting_text_standardize)%%00010} else {%%00010   title_text  = paste0('Cases used for PCA: all possible cases (', number_cases_PCA_based_on,' out of ', number_input_cases, ' cases) \nData standardization: ', setting_text_standardize)  %%00010}%%00010%%00010## setting of graph%%00010p &lt;- ggplot(df_out, aes(x = PC1,y = PC2, label = label)) +%%00010%%00009labs(title = &quot;PCA plot&quot;,%%00010%%00009%%00009subtitle = title_text)+%%00010%%00009theme_bw(base_size = 14) +%%00010%%00009theme(plot.title = element_text(hjust = 0.5, face='bold'),%%00010%%00009      axis.text.x = element_text(vjust = 0.5), %%00010%%00009      axis.text.y = element_text(vjust=0.5)) +%%00010%%00009geom_hline(yintercept=0, linetype=&quot;dashed&quot;, color = &quot;black&quot;) +%%00010%%00009geom_vline(xintercept=0, linetype=&quot;dashed&quot;, color = &quot;black&quot;) +%%00010%%00009xlab(percentage[1]) + %%00010%%00009ylab(percentage[2])%%00010%%00010if(knime.flow.in[[&quot;groups&quot;]] == ''){%%00010%%00009p &lt;- p + geom_point(size=3, color = &quot;grey20&quot;)%%00010} else {%%00010%%00009p &lt;- p + geom_point(aes(color = condition), size = 3)%%00010}%%00010%%00009%%00010if(annotation_switch =='yes'){%%00010%%00009p &lt;- p + geom_text_repel(show.legend = FALSE)%%00010}%%00010%%00010if(legend == 0) {%%00010%%00009p &lt;- p + theme(legend.position = &quot;none&quot;)%%00010} else {%%00010%%00009p &lt;- p + guides(color = guide_legend(title = &quot;Group&quot;))%%00010}%%00010%%00010p"/>
            <entry key="templateUUID" type="xstring" isnull="true" value=""/>
            <entry key="version" type="xstring" value="version 1.x"/>
            <entry key="Output non numbers (NaN, Inf, -Inf) as missing cells" type="xboolean" value="false"/>
            <entry key="sendRowNames" type="xboolean" value="true"/>
            <entry key="sendBatchSize" type="xint" value="10000"/>
            <entry key="knimeInType" type="xstring" value="data.frame"/>
            <entry key="overwriteRHome" type="xboolean" value="false"/>
            <entry key="rHome" type="xstring" value=""/>
            <entry key="useRPathHome" type="xboolean" value="true"/>
            <entry key="condaVariableName" type="xstring" isnull="true" value=""/>
        </config>
        <entry key="Image type" type="xstring" value="PNG"/>
    </config>
    <config key="variables">
        <entry key="version" type="xstring" value="V_2019_09_13"/>
        <config key="tree">
            <config key="R settings">
                <config key="rHome">
                    <entry key="used_variable" type="xstring" value="Rcommand"/>
                    <entry key="exposed_variable" type="xstring" isnull="true" value=""/>
                </config>
            </config>
        </config>
    </config>
    <config key="nodeAnnotation">
        <entry key="text" type="xstring" value="vizualize PCA data"/>
        <entry key="bgcolor" type="xint" value="16777215"/>
        <entry key="x-coordinate" type="xint" value="1669"/>
        <entry key="y-coordinate" type="xint" value="299"/>
        <entry key="width" type="xint" value="142"/>
        <entry key="height" type="xint" value="17"/>
        <entry key="alignment" type="xstring" value="CENTER"/>
        <entry key="borderSize" type="xint" value="0"/>
        <entry key="borderColor" type="xint" value="16777215"/>
        <entry key="defFontSize" type="xint" value="10"/>
        <entry key="annotation-version" type="xint" value="20151123"/>
        <config key="styles">
            <config key="style_0">
                <entry key="start" type="xint" value="0"/>
                <entry key="length" type="xint" value="18"/>
                <entry key="fontname" type="xstring" value="Sans"/>
                <entry key="fontstyle" type="xint" value="0"/>
                <entry key="fontsize" type="xint" value="10"/>
                <entry key="fgcolor" type="xint" value="0"/>
            </config>
        </config>
    </config>
    <entry key="customDescription" type="xstring" isnull="true" value=""/>
    <entry key="state" type="xstring" value="IDLE"/>
    <entry key="factory" type="xstring" value="org.knime.r.RToViewNodeFactory"/>
    <entry key="node-name" type="xstring" value="R View (Workspace)"/>
    <entry key="node-bundle-name" type="xstring" value="KNIME R-Project nodes"/>
    <entry key="node-bundle-symbolic-name" type="xstring" value="org.knime.r"/>
    <entry key="node-bundle-vendor" type="xstring" value="KNIME AG, Zurich, Switzerland"/>
    <entry key="node-bundle-version" type="xstring" value="4.7.0.v202206271529"/>
    <entry key="node-feature-name" type="xstring" value="KNIME Interactive R Statistics Integration"/>
    <entry key="node-feature-symbolic-name" type="xstring" value="org.knime.features.r.feature.group"/>
    <entry key="node-feature-vendor" type="xstring" value="KNIME AG, Zurich, Switzerland"/>
    <entry key="node-feature-version" type="xstring" value="4.7.0.v202211090002"/>
    <config key="factory_settings"/>
    <entry key="name" type="xstring" value="R View (Workspace)"/>
    <entry key="hasContent" type="xboolean" value="false"/>
    <entry key="isInactive" type="xboolean" value="false"/>
    <config key="ports">
        <config key="port_1">
            <entry key="index" type="xint" value="1"/>
            <entry key="port_dir_location" type="xstring" isnull="true" value=""/>
        </config>
    </config>
    <config key="filestores">
        <entry key="file_store_location" type="xstring" isnull="true" value=""/>
        <entry key="file_store_id" type="xstring" isnull="true" value=""/>
    </config>
</config>
