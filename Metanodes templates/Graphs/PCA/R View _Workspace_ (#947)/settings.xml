<?xml version="1.0" encoding="UTF-8"?>
<config xmlns="http://www.knime.org/2008/09/XMLConfig" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.knime.org/2008/09/XMLConfig http://www.knime.org/XMLConfig_2008_09.xsd" key="settings.xml">
    <entry key="node_file" type="xstring" value="settings.xml"/>
    <config key="flow_stack"/>
    <config key="internal_node_subsettings">
        <entry key="memory_policy" type="xstring" value="CacheSmallInMemory"/>
    </config>
    <config key="model">
        <entry key="Image width" type="xint" value="640"/>
        <entry key="Image height" type="xint" value="640"/>
        <entry key="Image resolution" type="xstring" value="NA"/>
        <entry key="Image background color" type="xstring" value="#ffffff"/>
        <entry key="Text point size" type="xint" value="12"/>
        <config key="R settings">
            <entry key="script" type="xstring" value="####second node####%%00010library(ggplot2)%%00010%%00010%%00010%%00010# save output from PCA to varable df_out%%00010df_out &lt;- as.data.frame(res.pca$x)%%00010%%00010eig &lt;- (res.pca$sdev)^2%%00009              # eigen values%%00010variance &lt;- round(eig*100/sum(eig), 2)%%00009              # computing variance described by new axes%%00010cumvar &lt;- cumsum(variance)%%00009                # cumulative variance%%00010%%00010#make dataframe with data for graph / number of principal components, variance and cumulative variance%%00010varDF = data.frame(Dimensions=1:length(variance), varExp=variance, cumvariance = cumvar)%%00010%%00010# text for x axis%%00010PC &lt;- sprintf(&quot;PC%s&quot;, varDF$Dimensions)%%00010%%00010# data for axis: x - PCA dimensions, y1 - variance, y2 - cumulative variance%%00010x &lt;- varDF$Dimensions%%00010y &lt;- varDF$varExp%%00010z &lt;- varDF$cumvariance%%00010%%00010if (top_N &lt; nrow(data_no_na) &amp; top_N!=0) {%%00010   title_text = paste(c('Scree plot based on ', toString(number_cases_PCA_based_on),' most variable cases (standard deviation)\n PCA settings: data standardization - ', setting_text_standardize), collapse='')%%00010} else{%%00010   title_text  = paste(c('Scree plot based on all possible cases (', toString(number_cases_PCA_based_on),' out of ', number_input_cases, ' cases) \n PCA settings: data standardization - ', setting_text_standardize), collapse='')%%00010   %%00010}%%00010%%00010#####%%00010#set graphs side by side with some margins to make space for titles and labels%%00010par(mfrow=c(1,2), mar=c(4,4,0.5,0.5), oma=c(1,1,4,1)) %%00010%%00010#barplot for variance%%00010df.bar &lt;- barplot(y, bta='n', xlab='Principal components', ylab='Variance', col='steelblue', border='black', ylim=range(pretty(y)), names.arg=PC)%%00010%%00010#plot with cumulative variance%%00010plot(x = x, y = z, xlab = 'Principal components', ylab = &quot;Cumulative variance&quot;, lwd=2, type = 'b', pch=19, xaxt='n', bty='n', ylim=range(pretty(z))) # first plot%%00010%%00010### with bad x labels at second graph%%00010%%00010# set of frequency of labels at x-axis %%00010#axis(1, at=seq(0, length(PC), by=2), labels=FALSE)%%00010#set text of x axis labels - 45 degrees rotated%%00010#text(x=seq(0, length(PC), by=2), par(&quot;usr&quot;)[3]-0.2, labels=PC[seq(1, length(PC), 2)], srt=45, pos=1, xpd=TRUE)%%00010%%00010%%00010###fixing%%00010axis(1, at=x, labels=PC, las = 2)%%00010%%00010%%00010#set main title of graphs%%00010mtext(title_text, cex=1, font=2, outer=TRUE, lines=-10)%%00010%%00010%%00010%%00010%%00010"/>
            <entry key="templateUUID" type="xstring" isnull="true" value=""/>
            <entry key="version" type="xstring" value="version 1.x"/>
            <entry key="Output non numbers (NaN, Inf, -Inf) as missing cells" type="xboolean" value="false"/>
            <entry key="sendRowNames" type="xboolean" value="true"/>
            <entry key="sendBatchSize" type="xint" value="10000"/>
            <entry key="knimeInType" type="xstring" value="data.frame"/>
            <entry key="overwriteRHome" type="xboolean" value="false"/>
            <entry key="rHome" type="xstring" value=""/>
            <entry key="useRPathHome" type="xboolean" value="true"/>
            <entry key="condaVariableName" type="xstring" isnull="true" value=""/>
        </config>
        <entry key="Image type" type="xstring" value="PNG"/>
    </config>
    <config key="variables">
        <entry key="version" type="xstring" value="V_2019_09_13"/>
        <config key="tree">
            <config key="R settings">
                <config key="rHome">
                    <entry key="used_variable" type="xstring" value="Rcommand"/>
                    <entry key="exposed_variable" type="xstring" isnull="true" value=""/>
                </config>
            </config>
        </config>
    </config>
    <config key="nodeAnnotation">
        <entry key="text" type="xstring" value="scree plot"/>
        <entry key="bgcolor" type="xint" value="16777215"/>
        <entry key="x-coordinate" type="xint" value="1669"/>
        <entry key="y-coordinate" type="xint" value="441"/>
        <entry key="width" type="xint" value="142"/>
        <entry key="height" type="xint" value="17"/>
        <entry key="alignment" type="xstring" value="CENTER"/>
        <entry key="borderSize" type="xint" value="0"/>
        <entry key="borderColor" type="xint" value="16777215"/>
        <entry key="defFontSize" type="xint" value="10"/>
        <entry key="annotation-version" type="xint" value="20151123"/>
        <config key="styles">
            <config key="style_0">
                <entry key="start" type="xint" value="0"/>
                <entry key="length" type="xint" value="10"/>
                <entry key="fontname" type="xstring" value="Sans"/>
                <entry key="fontstyle" type="xint" value="0"/>
                <entry key="fontsize" type="xint" value="10"/>
                <entry key="fgcolor" type="xint" value="0"/>
            </config>
        </config>
    </config>
    <entry key="customDescription" type="xstring" isnull="true" value=""/>
    <entry key="state" type="xstring" value="IDLE"/>
    <entry key="factory" type="xstring" value="org.knime.r.RToViewNodeFactory"/>
    <entry key="node-name" type="xstring" value="R View (Workspace)"/>
    <entry key="node-bundle-name" type="xstring" value="KNIME R-Project nodes"/>
    <entry key="node-bundle-symbolic-name" type="xstring" value="org.knime.r"/>
    <entry key="node-bundle-vendor" type="xstring" value="KNIME AG, Zurich, Switzerland"/>
    <entry key="node-bundle-version" type="xstring" value="4.7.0.v202206271529"/>
    <entry key="node-feature-name" type="xstring" value="KNIME Interactive R Statistics Integration"/>
    <entry key="node-feature-symbolic-name" type="xstring" value="org.knime.features.r.feature.group"/>
    <entry key="node-feature-vendor" type="xstring" value="KNIME AG, Zurich, Switzerland"/>
    <entry key="node-feature-version" type="xstring" value="4.7.0.v202211090002"/>
    <config key="factory_settings"/>
    <entry key="name" type="xstring" value="R View (Workspace)"/>
    <entry key="hasContent" type="xboolean" value="false"/>
    <entry key="isInactive" type="xboolean" value="false"/>
    <config key="ports">
        <config key="port_1">
            <entry key="index" type="xint" value="1"/>
            <entry key="port_dir_location" type="xstring" isnull="true" value=""/>
        </config>
    </config>
    <config key="filestores">
        <entry key="file_store_location" type="xstring" isnull="true" value=""/>
        <entry key="file_store_id" type="xstring" isnull="true" value=""/>
    </config>
</config>
