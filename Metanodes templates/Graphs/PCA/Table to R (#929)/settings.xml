<?xml version="1.0" encoding="UTF-8"?>
<config xmlns="http://www.knime.org/2008/09/XMLConfig" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.knime.org/2008/09/XMLConfig http://www.knime.org/XMLConfig_2008_09.xsd" key="settings.xml">
    <entry key="node_file" type="xstring" value="settings.xml"/>
    <config key="flow_stack"/>
    <config key="internal_node_subsettings">
        <entry key="memory_policy" type="xstring" value="CacheSmallInMemory"/>
    </config>
    <config key="model">
        <entry key="script" type="xstring" value="# save workflow variables to variables%%00010standardize &lt;- knime.flow.in[[&quot;standardize&quot;]]%%00010top_N &lt;- knime.flow.in[[&quot;top_n_proteins&quot;]]%%00010pca_rows_columns &lt;- knime.flow.in[[&quot;pca_rows_columns&quot;]]%%00010annotation_switch &lt;- knime.flow.in[[&quot;annotations_switch&quot;]]%%00010%%00010# data input - knime datatable, ie. in the beginning, rows are proteins/peptides/genes, columns are conditions (bait, ctrl...)%%00010data &lt;- knime.in%%00010%%00010# create labelling and group variable%%00010metadata_df &lt;- data.frame(Labels = colnames(data))%%00010%%00010if (knime.flow.in[[&quot;pca_rows_columns&quot;]] == 'rows') {%%00010%%00009i &lt;- which(rownames(data) == 'Point.groups')%%00010%%00009metadata_df$Groups &lt;- as.character(unname(unlist(data[i,])))%%00010%%00009data &lt;- data[-i,]%%00010%%00010%%00009data &lt;- sapply(data, function(x) as.numeric(as.character(x))) |&gt; as.data.frame()%%00010} else if (knime.flow.in[[&quot;pca_rows_columns&quot;]] == 'columns' &amp; knime.flow.in[[&quot;group_bool&quot;]] == 1 &amp; knime.flow.in[[&quot;groups_string&quot;]] != '') {%%00010%%00009metadata_df$Groups &lt;- unlist(strsplit(knime.flow.in[[&quot;groups_string&quot;]], &quot;,&quot;))%%00010}%%00010%%00010# all rows are removed if there is one or more missing values%%00010data_no_na &lt;- data[complete.cases(data),]%%00010%%00010# compute most variable proteins%%00010compute_variation &lt;- function(x) sd(x) / mean(x)%%00010%%00010data_no_na$var &lt;- apply(data_no_na, 1, compute_variation)%%00010data_no_na &lt;- data_no_na[order(data_no_na$var),]%%00010%%00010if (top_N &lt; nrow(data_no_na) &amp; top_N!=0) {%%00010   data_most_var &lt;- data_no_na[1:top_N, ]%%00010} else{%%00010   data_most_var &lt;- data_no_na%%00010}%%00010%%00010data_most_var$var &lt;- NULL%%00010%%00010# compute number of cases PCA is based on%%00010number_input_cases &lt;- nrow(data)%%00010number_removed_cases &lt;- number_input_cases - nrow(data_no_na)%%00010number_cases_PCA_based_on &lt;- nrow(data_most_var)%%00010%%00010# text of PCA settings in title%%00010if(toString(knime.flow.in[[&quot;standardize&quot;]]==1)){%%00010%%00009setting_text_standardize = 'yes'%%00010} else{%%00010%%00009setting_text_standardize = 'no'%%00010}%%00010%%00010# transpose the df%%00010tdata &lt;- t(data_most_var)%%00010%%00010# computing PCA%%00010if(standardize==1){%%00010%%00009res.pca &lt;- prcomp(tdata, scale=TRUE)%%00010} else{%%00010%%00009res.pca &lt;- prcomp(tdata, scale=FALSE)%%00010}%%00010%%00010knime.out &lt;- res.pca"/>
        <entry key="templateUUID" type="xstring" isnull="true" value=""/>
        <entry key="version" type="xstring" value="version 1.x"/>
        <entry key="Output non numbers (NaN, Inf, -Inf) as missing cells" type="xboolean" value="false"/>
        <entry key="sendRowNames" type="xboolean" value="true"/>
        <entry key="sendBatchSize" type="xint" value="10000"/>
        <entry key="knimeInType" type="xstring" value="data.frame"/>
        <entry key="overwriteRHome" type="xboolean" value="false"/>
        <entry key="rHome" type="xstring" value="/home/knimeuser/.Renv/4.2.0/4.5.2a/lib/R"/>
        <entry key="useRPathHome" type="xboolean" value="true"/>
        <entry key="condaVariableName" type="xstring" isnull="true" value=""/>
    </config>
    <config key="variables">
        <entry key="version" type="xstring" value="V_2019_09_13"/>
        <config key="tree">
            <config key="rHome">
                <entry key="used_variable" type="xstring" value="Rcommand"/>
                <entry key="exposed_variable" type="xstring" isnull="true" value=""/>
            </config>
        </config>
    </config>
    <config key="nodeAnnotation">
        <entry key="text" type="xstring" value="run PCA"/>
        <entry key="bgcolor" type="xint" value="16777215"/>
        <entry key="x-coordinate" type="xint" value="1694"/>
        <entry key="y-coordinate" type="xint" value="441"/>
        <entry key="width" type="xint" value="142"/>
        <entry key="height" type="xint" value="17"/>
        <entry key="alignment" type="xstring" value="CENTER"/>
        <entry key="borderSize" type="xint" value="0"/>
        <entry key="borderColor" type="xint" value="16777215"/>
        <entry key="defFontSize" type="xint" value="10"/>
        <entry key="annotation-version" type="xint" value="20151123"/>
        <config key="styles"/>
    </config>
    <entry key="customDescription" type="xstring" isnull="true" value=""/>
    <entry key="state" type="xstring" value="IDLE"/>
    <entry key="factory" type="xstring" value="org.knime.r.TableToRNodeFactory"/>
    <entry key="node-name" type="xstring" value="Table to R"/>
    <entry key="node-bundle-name" type="xstring" value="KNIME R-Project nodes"/>
    <entry key="node-bundle-symbolic-name" type="xstring" value="org.knime.r"/>
    <entry key="node-bundle-vendor" type="xstring" value="KNIME AG, Zurich, Switzerland"/>
    <entry key="node-bundle-version" type="xstring" value="4.7.0.v202206271529"/>
    <entry key="node-feature-name" type="xstring" value="KNIME Interactive R Statistics Integration"/>
    <entry key="node-feature-symbolic-name" type="xstring" value="org.knime.features.r.feature.group"/>
    <entry key="node-feature-vendor" type="xstring" value="KNIME AG, Zurich, Switzerland"/>
    <entry key="node-feature-version" type="xstring" value="4.7.0.v202211090002"/>
    <config key="factory_settings"/>
    <entry key="name" type="xstring" value="Table to R"/>
    <entry key="hasContent" type="xboolean" value="false"/>
    <entry key="isInactive" type="xboolean" value="false"/>
    <config key="ports">
        <config key="port_1">
            <entry key="index" type="xint" value="1"/>
            <entry key="port_dir_location" type="xstring" isnull="true" value=""/>
        </config>
    </config>
    <config key="filestores">
        <entry key="file_store_location" type="xstring" isnull="true" value=""/>
        <entry key="file_store_id" type="xstring" isnull="true" value=""/>
    </config>
</config>
