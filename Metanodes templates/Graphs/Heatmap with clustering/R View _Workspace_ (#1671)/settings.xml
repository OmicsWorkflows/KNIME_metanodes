<?xml version="1.0" encoding="UTF-8"?>
<config xmlns="http://www.knime.org/2008/09/XMLConfig" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.knime.org/2008/09/XMLConfig http://www.knime.org/XMLConfig_2008_09.xsd" key="settings.xml">
    <entry key="node_file" type="xstring" value="settings.xml"/>
    <config key="flow_stack"/>
    <config key="internal_node_subsettings">
        <entry key="memory_policy" type="xstring" value="CacheSmallInMemory"/>
    </config>
    <config key="model">
        <entry key="Image width" type="xint" value="1000"/>
        <entry key="Image height" type="xint" value="8000"/>
        <entry key="Image resolution" type="xstring" value="150"/>
        <entry key="Image background color" type="xstring" value="#ffffff"/>
        <entry key="Text point size" type="xint" value="12"/>
        <config key="R settings">
            <entry key="script" type="xstring" value="suppressPackageStartupMessages(library(ComplexHeatmap))%%00010%%00010# color set%%00010colors_palette &lt;- c('deeppink1', 'red2', 'darkorange', 'goldenrod1', 'lawngreen', 'mediumspringgreen', 'deepskyblue2', 'blue3')%%00010%%00010# optionally transform imputed NA values back into NAs%%00010if (knime.flow.in[[&quot;show_NAs&quot;]] == 1  &amp;&amp; knime.flow.in[[&quot;imputation&quot;]] != 'none'){%%00010%%00009m_scaled[na_i] &lt;- NA%%00010}%%00010%%00010# set the variable to perform or not to perform columns level clustering on top of the rows level clustering%%00010if (knime.flow.in[[&quot;cluster_columns&quot;]]){%%00010%%00009cluster_columns &lt;- TRUE%%00010} else {%%00010%%00009cluster_columns &lt;- FALSE%%00010}%%00010%%00010# sets the row K-means repeats%%00010row_km_repeats &lt;- knime.flow.in[[&quot;row_km_repeats&quot;]]%%00010%%00010# sets the rows dendrogram width%%00010row_dend_width &lt;- unit(knime.flow.in[[&quot;row_dendrogram_width&quot;]]/150, &quot;in&quot;)%%00010%%00010# sets the columns dendrogram height%%00010column_dend_height &lt;- unit(knime.flow.in[[&quot;col_dendrogram_height&quot;]]/150, &quot;in&quot;)%%00010%%00010# vector storing information about clusters%%00010cluster_char &lt;- as.character(clusters)%%00010%%00010# colors for groups%%00010if (knime.flow.in[[&quot;no_clusters&quot;]] &lt;= 8) {%%00010%%00009col_list &lt;- colors_palette[seq.int(from = 1, to = 8, length.out = knime.flow.in[[&quot;no_clusters&quot;]])]%%00010} else {%%00010%%00009palette &lt;- colorRampPalette(colors_palette)%%00010%%00009col_list &lt;- palette(knime.flow.in[[&quot;no_clusters&quot;]])%%00010}%%00010%%00010names(col_list) &lt;- as.character(1:knime.flow.in[[&quot;no_clusters&quot;]])%%00010%%00010# get order in which are clusters in the final heatmap%%00010clusters_order &lt;- data.frame(order = clust$order,%%00010%%00009%%00009%%00009%%00009%%00009    labels = clust$labels[clust$order])%%00010%%00009%%00009%%00009    %%00010for (i in 1:knime.flow.in[[&quot;no_clusters&quot;]]){%%00010%%00009rows &lt;- unname(which(clusters == i))%%00010%%00009clusters_order$cluster[clusters_order$order %in% rows] &lt;- as.character(i)%%00010}%%00010%%00010left_side_label &lt;- unique(clusters_order$cluster)%%00010%%00010# variables for heatmap creation%%00010heatmap_rownames &lt;- ifelse(knime.flow.in[[&quot;show_row_names&quot;]] == 1, T, F)%%00010%%00010if(removed_rows &gt; 0 &amp;&amp; removed_rows_no_imp &gt; 0){%%00010%%00009heatmap_subtitle &lt;- paste(paste(removed_rows, 'rows filtered out due to only containing NA values'), %%00010%%00009%%00009%%00009%%00009%%00009%%00009%%00009 paste(removed_rows_no_imp, 'rows filtered out due to containing at least one NA value'), %%00010%%00009%%00009%%00009%%00009%%00009%%00009%%00009 sep = '\n')%%00010} else if(removed_rows == 0 &amp;&amp; removed_rows_no_imp == 0) {%%00010%%00009heatmap_subtitle &lt;- ''%%00010} else if(removed_rows &gt; 0 &amp;&amp; removed_rows_no_imp == 0) {%%00010%%00009heatmap_subtitle &lt;- paste(removed_rows, 'rows filtered out due to only containing NA values')%%00010} else {%%00010%%00009heatmap_subtitle &lt;- paste(removed_rows_no_imp, 'rows filtered out due to containing at least one NA value')%%00010}%%00010%%00010if(trimws(knime.flow.in[[&quot;graph_subtitle&quot;]]) != '' &amp;&amp; heatmap_subtitle == ''){%%00010%%00009heatmap_subtitle &lt;- trimws(knime.flow.in[[&quot;graph_subtitle&quot;]])%%00010} else if(trimws(knime.flow.in[[&quot;graph_subtitle&quot;]]) != '' &amp;&amp; heatmap_subtitle != '') {%%00010%%00009heatmap_subtitle &lt;- paste(trimws(knime.flow.in[[&quot;graph_subtitle&quot;]]), heatmap_subtitle, sep = '\n')%%00010}%%00010%%00010# create heatmaps%%00010ha &lt;- rowAnnotation(group = cluster_char, col = list(group = col_list),%%00010%%00009%%00009%%00009%%00009annotation_name_gp = gpar(fontsize = 8, fontface = &quot;bold&quot;),%%00010%%00009%%00009%%00009%%00009annotation_legend_param = list(labels_gp = gpar(fontsize = 8),%%00010%%00009%%00009%%00009%%00009%%00009%%00009%%00009   title_gp = gpar(fontsize = 8, fontface = &quot;bold&quot;)),%%00010%%00009%%00009%%00009%%00009simple_anno_size = unit(0.075, &quot;in&quot;))%%00010%%00010if(knime.flow.in[[&quot;no_clusters&quot;]] &gt; 1){%%00010%%00009ht &lt;- Heatmap(m_scaled, name = 'value',%%00010%%00009%%00009column_title = heatmap_subtitle,%%00010%%00009%%00009cluster_rows = clust, %%00010%%00009%%00009cluster_columns = cluster_columns,%%00010%%00009%%00009column_dend_height = column_dend_height, %%00010%%00009%%00009na_col = 'grey50', %%00010%%00009%%00009row_km_repeats = row_km_repeats, %%00010%%00009%%00009row_dend_width = row_dend_width, %%00010%%00009%%00009right_annotation = ha,%%00010%%00009%%00009row_names_gp = grid::gpar(fontsize = 6),%%00010%%00009%%00009column_names_gp = grid::gpar(fontsize = 8),%%00010%%00009%%00009show_row_names = heatmap_rownames,%%00010%%00009%%00009row_split = knime.flow.in[[&quot;no_clusters&quot;]],%%00010%%00009%%00009row_title = left_side_label, %%00010%%00009%%00009use_raster = TRUE,%%00010%%00009%%00009column_title_gp = gpar(fontsize = 8),%%00010%%00009%%00009heatmap_legend_param = list(labels_gp = gpar(fontsize = 8),%%00010%%00009%%00009%%00009%%00009%%00009%%00009%%00009   title_gp = gpar(fontsize = 8, fontface = &quot;bold&quot;)))%%00010} else {%%00010%%00009ht &lt;- Heatmap(m_scaled, name = 'value',%%00010%%00009%%00009column_title = heatmap_subtitle,%%00010%%00009%%00009cluster_rows = clust, %%00010%%00009%%00009cluster_columns = cluster_columns,%%00010%%00009%%00009column_dend_height = column_dend_height, %%00010%%00009%%00009na_col = 'grey50', %%00010%%00009%%00009row_km_repeats = row_km_repeats, %%00010%%00009%%00009row_dend_width = row_dend_width, %%00010%%00009%%00009right_annotation = ha,%%00010%%00009%%00009row_names_gp = grid::gpar(fontsize = 6),%%00010%%00009%%00009column_names_gp = grid::gpar(fontsize = 8),%%00010%%00009%%00009show_row_names = heatmap_rownames,%%00010%%00009%%00009use_raster = TRUE,%%00010%%00009%%00009column_title_gp = gpar(fontsize = 8),%%00010%%00009%%00009heatmap_legend_param = list(labels_gp = gpar(fontsize = 8),%%00010%%00009%%00009%%00009%%00009%%00009%%00009%%00009   title_gp = gpar(fontsize = 8, fontface = &quot;bold&quot;)))%%00010}%%00010%%00010# variable for title creation%%00010title &lt;- paste0('Heatmap with row ', ifelse(knime.flow.in[[&quot;cluster_columns&quot;]] == 1, 'and column ', ''),  'clustering')%%00010%%00010draw(ht, column_title = title, %%00010%%00009column_title_gp = gpar(fontsize = 8, fontface = &quot;bold&quot;))%%00010"/>
            <entry key="templateUUID" type="xstring" isnull="true" value=""/>
            <entry key="version" type="xstring" value="version 1.x"/>
            <entry key="Output non numbers (NaN, Inf, -Inf) as missing cells" type="xboolean" value="false"/>
            <entry key="sendRowNames" type="xboolean" value="true"/>
            <entry key="sendBatchSize" type="xint" value="10000"/>
            <entry key="knimeInType" type="xstring" value="data.frame"/>
            <entry key="overwriteRHome" type="xboolean" value="false"/>
            <entry key="rHome" type="xstring" value="/home/knimeuser/.Renv/4.2.0/4.5.2a/lib/R"/>
            <entry key="useRPathHome" type="xboolean" value="true"/>
            <entry key="condaVariableName" type="xstring" isnull="true" value=""/>
        </config>
        <entry key="Image type" type="xstring" value="PNG"/>
    </config>
    <config key="variables">
        <entry key="version" type="xstring" value="V_2019_09_13"/>
        <config key="tree">
            <config key="Image width">
                <entry key="used_variable" type="xstring" value="width"/>
                <entry key="exposed_variable" type="xstring" isnull="true" value=""/>
            </config>
            <config key="Image height">
                <entry key="used_variable" type="xstring" value="height"/>
                <entry key="exposed_variable" type="xstring" isnull="true" value=""/>
            </config>
        </config>
    </config>
    <config key="nodeAnnotation">
        <entry key="text" type="xstring" value="create heatmap"/>
        <entry key="bgcolor" type="xint" value="16777215"/>
        <entry key="x-coordinate" type="xint" value="1369"/>
        <entry key="y-coordinate" type="xint" value="39"/>
        <entry key="width" type="xint" value="142"/>
        <entry key="height" type="xint" value="17"/>
        <entry key="alignment" type="xstring" value="CENTER"/>
        <entry key="borderSize" type="xint" value="0"/>
        <entry key="borderColor" type="xint" value="16777215"/>
        <entry key="defFontSize" type="xint" value="10"/>
        <entry key="annotation-version" type="xint" value="20151123"/>
        <config key="styles">
            <config key="style_0">
                <entry key="start" type="xint" value="0"/>
                <entry key="length" type="xint" value="14"/>
                <entry key="fontname" type="xstring" value="Sans"/>
                <entry key="fontstyle" type="xint" value="0"/>
                <entry key="fontsize" type="xint" value="10"/>
                <entry key="fgcolor" type="xint" value="0"/>
            </config>
        </config>
    </config>
    <entry key="customDescription" type="xstring" isnull="true" value=""/>
    <entry key="state" type="xstring" value="IDLE"/>
    <entry key="factory" type="xstring" value="org.knime.r.RToViewNodeFactory"/>
    <entry key="node-name" type="xstring" value="R View (Workspace)"/>
    <entry key="node-bundle-name" type="xstring" value="KNIME R-Project nodes"/>
    <entry key="node-bundle-symbolic-name" type="xstring" value="org.knime.r"/>
    <entry key="node-bundle-vendor" type="xstring" value="KNIME AG, Zurich, Switzerland"/>
    <entry key="node-bundle-version" type="xstring" value="4.7.0.v202206271529"/>
    <entry key="node-feature-name" type="xstring" value="KNIME Interactive R Statistics Integration"/>
    <entry key="node-feature-symbolic-name" type="xstring" value="org.knime.features.r.feature.group"/>
    <entry key="node-feature-vendor" type="xstring" value="KNIME AG, Zurich, Switzerland"/>
    <entry key="node-feature-version" type="xstring" value="4.7.0.v202211090002"/>
    <config key="factory_settings"/>
    <entry key="name" type="xstring" value="R View (Workspace)"/>
    <entry key="hasContent" type="xboolean" value="false"/>
    <entry key="isInactive" type="xboolean" value="false"/>
    <config key="ports">
        <config key="port_1">
            <entry key="index" type="xint" value="1"/>
            <entry key="port_dir_location" type="xstring" isnull="true" value=""/>
        </config>
    </config>
    <config key="filestores">
        <entry key="file_store_location" type="xstring" isnull="true" value=""/>
        <entry key="file_store_id" type="xstring" isnull="true" value=""/>
    </config>
</config>
