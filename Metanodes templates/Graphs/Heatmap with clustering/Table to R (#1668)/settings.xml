<?xml version="1.0" encoding="UTF-8"?>
<config xmlns="http://www.knime.org/2008/09/XMLConfig" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.knime.org/2008/09/XMLConfig http://www.knime.org/XMLConfig_2008_09.xsd" key="settings.xml">
    <entry key="node_file" type="xstring" value="settings.xml"/>
    <config key="flow_stack"/>
    <config key="internal_node_subsettings">
        <entry key="memory_policy" type="xstring" value="CacheSmallInMemory"/>
    </config>
    <config key="model">
        <entry key="script" type="xstring" value="suppressPackageStartupMessages(library(tidyverse))%%00010%%00010# initiate df%%00010df &lt;- knime.in%%00010%%00010# save row order%%00010id_order &lt;- rownames(df)%%00010%%00010# save ID column values in a separate vector%%00010df$Anno &lt;- as.character(df$Anno)%%00010df$Anno &lt;- sapply(df$Anno, function(x) ifelse(is.na(x), '', x))%%00010%%00010df &lt;- df |&gt;%%00010%%00009rownames_to_column('ID')%%00010%%00010# if no imputation is selected, remove rows that only contain missing values%%00010before_rows &lt;- nrow(df)%%00010%%00010if (knime.flow.in[[&quot;imputation&quot;]] == 'none') {%%00010%%00009df &lt;- df[rowSums(is.na(df)) &lt; (ncol(df)-2),]%%00010}%%00010%%00010removed_rows &lt;- before_rows - nrow(df)%%00010removed_rows_no_imp &lt;- 0%%00010%%00010# only remove rows containing NAs in case of no imputation of missing values%%00010if (knime.flow.in[[&quot;imputation&quot;]] == 'none') {%%00010%%00009df &lt;- na.omit(df)%%00010%%00009removed_rows_no_imp &lt;- before_rows - removed_rows - nrow(df)%%00010}%%00010%%00010# create matrix before global imputation, get indices of all NAs%%00010id &lt;- df$ID%%00010anno &lt;- df$Anno%%00010%%00010m &lt;- df |&gt;%%00010%%00009select(-ID, -Anno) |&gt;%%00010%%00009as.matrix()%%00010%%00009%%00010na_i &lt;- is.na(m) |&gt;%%00010%%00009as.data.frame() |&gt;%%00010%%00009as.matrix()%%00010%%00009%%00010# impute by column minimum%%00010if (knime.flow.in[[&quot;imputation&quot;]] == 'column minimum'){%%00010%%00009m &lt;- df |&gt;%%00010%%00009%%00009gather(-ID, -Anno, key = 'column', value = 'value') |&gt;%%00010%%00009%%00009group_by(column) |&gt;%%00010%%00009%%00009mutate(col_min = min(value, na.rm = TRUE)) |&gt;%%00010%%00009%%00009ungroup() |&gt;%%00010%%00009%%00009mutate(value_imp = ifelse(is.na(value), col_min, value)) |&gt;%%00010%%00009%%00009select(-value, -col_min) |&gt;%%00010%%00009%%00009spread(key = column, value = value_imp) |&gt;%%00010%%00009%%00009as.data.frame() |&gt;%%00010%%00009%%00009select(-ID, -Anno) |&gt;%%00010%%00009%%00009as.matrix()%%00010}%%00010%%00010# impute by constant or global minimum%%00010if (knime.flow.in[[&quot;imputation&quot;]] %in% c('constant', 'global minimum')) {%%00010%%00009imp_value &lt;- ifelse(knime.flow.in[[&quot;imputation&quot;]] == 'constant',%%00010%%00009%%00009%%00009%%00009%%00009knime.flow.in[[&quot;imp_const&quot;]], %%00010%%00009%%00009%%00009%%00009%%00009min(m, na.rm = TRUE))%%00010%%00009m[na_i] &lt;- imp_value%%00010}%%00010%%00010# scale rowwise%%00010if(knime.flow.in[[&quot;standardize_bool&quot;]] == 1){%%00010%%00009m_scaled &lt;- t(scale(t(m)))%%00010%%00009m_scaled[is.na(m_scaled)] &lt;- 0%%00010} else {%%00010%%00009m_scaled &lt;- m%%00010}%%00010rownames(m_scaled) &lt;- as.character(anno)%%00010%%00010d &lt;- dist(m_scaled)%%00010clust &lt;- hclust(d, method = 'ward.D2')%%00010%%00010clusters &lt;- cutree(clust, k = knime.flow.in[[&quot;no_clusters&quot;]])"/>
        <entry key="templateUUID" type="xstring" isnull="true" value=""/>
        <entry key="version" type="xstring" value="version 1.x"/>
        <entry key="Output non numbers (NaN, Inf, -Inf) as missing cells" type="xboolean" value="false"/>
        <entry key="sendRowNames" type="xboolean" value="true"/>
        <entry key="sendBatchSize" type="xint" value="10000"/>
        <entry key="knimeInType" type="xstring" value="data.frame"/>
        <entry key="overwriteRHome" type="xboolean" value="false"/>
        <entry key="rHome" type="xstring" value="/home/knimeuser/.Renv/4.2.0/4.5.2a/lib/R"/>
        <entry key="useRPathHome" type="xboolean" value="true"/>
        <entry key="condaVariableName" type="xstring" isnull="true" value=""/>
    </config>
    <config key="variables">
        <entry key="version" type="xstring" value="V_2019_09_13"/>
        <config key="tree">
            <config key="rHome">
                <entry key="used_variable" type="xstring" value="Rcommand"/>
                <entry key="exposed_variable" type="xstring" isnull="true" value=""/>
            </config>
        </config>
    </config>
    <config key="nodeAnnotation">
        <entry key="text" type="xstring" value="calculate%%00010distance and%%00010clustering"/>
        <entry key="bgcolor" type="xint" value="16777215"/>
        <entry key="x-coordinate" type="xint" value="1150"/>
        <entry key="y-coordinate" type="xint" value="119"/>
        <entry key="width" type="xint" value="142"/>
        <entry key="height" type="xint" value="48"/>
        <entry key="alignment" type="xstring" value="CENTER"/>
        <entry key="borderSize" type="xint" value="0"/>
        <entry key="borderColor" type="xint" value="16777215"/>
        <entry key="defFontSize" type="xint" value="10"/>
        <entry key="annotation-version" type="xint" value="20151123"/>
        <config key="styles">
            <config key="style_0">
                <entry key="start" type="xint" value="0"/>
                <entry key="length" type="xint" value="33"/>
                <entry key="fontname" type="xstring" value="Sans"/>
                <entry key="fontstyle" type="xint" value="0"/>
                <entry key="fontsize" type="xint" value="10"/>
                <entry key="fgcolor" type="xint" value="0"/>
            </config>
        </config>
    </config>
    <entry key="customDescription" type="xstring" isnull="true" value=""/>
    <entry key="state" type="xstring" value="IDLE"/>
    <entry key="factory" type="xstring" value="org.knime.r.TableToRNodeFactory"/>
    <entry key="node-name" type="xstring" value="Table to R"/>
    <entry key="node-bundle-name" type="xstring" value="KNIME R-Project nodes"/>
    <entry key="node-bundle-symbolic-name" type="xstring" value="org.knime.r"/>
    <entry key="node-bundle-vendor" type="xstring" value="KNIME AG, Zurich, Switzerland"/>
    <entry key="node-bundle-version" type="xstring" value="4.7.0.v202206271529"/>
    <entry key="node-feature-name" type="xstring" value="KNIME Interactive R Statistics Integration"/>
    <entry key="node-feature-symbolic-name" type="xstring" value="org.knime.features.r.feature.group"/>
    <entry key="node-feature-vendor" type="xstring" value="KNIME AG, Zurich, Switzerland"/>
    <entry key="node-feature-version" type="xstring" value="4.7.0.v202211090002"/>
    <config key="factory_settings"/>
    <entry key="name" type="xstring" value="Table to R"/>
    <entry key="hasContent" type="xboolean" value="false"/>
    <entry key="isInactive" type="xboolean" value="false"/>
    <config key="ports">
        <config key="port_1">
            <entry key="index" type="xint" value="1"/>
            <entry key="port_dir_location" type="xstring" isnull="true" value=""/>
        </config>
    </config>
    <config key="filestores">
        <entry key="file_store_location" type="xstring" isnull="true" value=""/>
        <entry key="file_store_id" type="xstring" isnull="true" value=""/>
    </config>
</config>
