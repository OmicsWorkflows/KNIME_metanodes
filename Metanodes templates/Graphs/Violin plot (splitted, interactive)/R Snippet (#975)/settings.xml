<?xml version="1.0" encoding="UTF-8"?>
<config xmlns="http://www.knime.org/2008/09/XMLConfig" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.knime.org/2008/09/XMLConfig http://www.knime.org/XMLConfig_2008_09.xsd" key="settings.xml">
    <entry key="node_file" type="xstring" value="settings.xml"/>
    <config key="flow_stack"/>
    <config key="internal_node_subsettings">
        <entry key="memory_policy" type="xstring" value="CacheSmallInMemory"/>
    </config>
    <config key="model">
        <entry key="script" type="xstring" value="# libraries required%%00010library(plotly)%%00010%%00010# change colors%%00010if (knime.flow.in[[&quot;color_left&quot;]] == &quot;blue&quot;) color_left &lt;- &quot;dodgerblue2&quot;%%00010if (knime.flow.in[[&quot;color_right&quot;]] == &quot;blue&quot;) color_right &lt;- &quot;dodgerblue2&quot;%%00010if (knime.flow.in[[&quot;color_left&quot;]] == &quot;green&quot;) color_left &lt;- &quot;chartreuse3&quot;%%00010if (knime.flow.in[[&quot;color_right&quot;]] == &quot;green&quot;) color_right &lt;- &quot;chartreuse3&quot;%%00010if (knime.flow.in[[&quot;color_left&quot;]] == &quot;red&quot;) color_left &lt;- &quot;firebrick2&quot;%%00010if (knime.flow.in[[&quot;color_right&quot;]] == &quot;red&quot;) color_right &lt;- &quot;firebrick2&quot;%%00010if (knime.flow.in[[&quot;color_left&quot;]] == &quot;yellow&quot;) color_left &lt;- &quot;gold&quot;%%00010if (knime.flow.in[[&quot;color_right&quot;]] == &quot;yellow&quot;) color_right &lt;- &quot;gold&quot;%%00010if (knime.flow.in[[&quot;color_left&quot;]] == &quot;orange&quot;) color_left &lt;- &quot;orange2&quot;%%00010if (knime.flow.in[[&quot;color_right&quot;]] == &quot;orange&quot;) color_right &lt;- &quot;orange2&quot;%%00010if (knime.flow.in[[&quot;color_left&quot;]] == &quot;pink&quot;) color_left &lt;- &quot;violetred1&quot;%%00010if (knime.flow.in[[&quot;color_right&quot;]] == &quot;pink&quot;) color_right &lt;- &quot;violetred1&quot;%%00010if (knime.flow.in[[&quot;color_left&quot;]] == &quot;grey&quot;) color_left &lt;- &quot;gray40&quot;%%00010if (knime.flow.in[[&quot;color_right&quot;]] == &quot;grey&quot;) color_right &lt;- &quot;gray40&quot;%%00010%%00010# data input%%00010data &lt;- knime.in%%00010%%00010dataset_1 &lt;- data[,(1:(ncol(data)/2))]%%00010dataset_2 &lt;- data[,((ncol(data)/2+1):ncol(data))]%%00010%%00010# changing uniform colnames for both datasets%%00010list &lt;- trimws(strsplit(knime.flow.in[[&quot;colnames_violins&quot;]],',')[[1]])%%00010colnames(dataset_1) &lt;- list%%00010colnames(dataset_2) &lt;- list%%00010%%00010# adding one column with the information about dataframe legend%%00010list_legend &lt;- trimws(strsplit(knime.flow.in[[&quot;legend&quot;]],',')[[1]])%%00010dataset_1$legend &lt;- list_legend[[1]]%%00010dataset_2$legend &lt;- list_legend[[2]]%%00010%%00010# merging both datasets so the dataset 2 is appended on the bottom of dataset 1%%00010data_all &lt;- rbind(dataset_1, dataset_2) %%00010%%00010# changing wide data format to long data format requried for plotting%%00010data_long &lt;- reshape(data_all,%%00010%%00009%%00009%%00009%%00009  direction = &quot;long&quot;,%%00010%%00009%%00009%%00009%%00009  varying = list, %%00010%%00009%%00009%%00009%%00009  v.names = &quot;intensity&quot;,%%00010%%00009%%00009%%00009%%00009  timevar = &quot;treatment&quot;,%%00010%%00009%%00009%%00009%%00009  times = list)%%00010#str(data_long)%%00010%%00010# changing the legend and treatment columns from character to factor%%00010data_long$legend &lt;- as.factor(data_long$legend)%%00010data_long$treatment &lt;- as.factor(data_long$treatment)%%00010%%00010# plotting violins%%00010pom &lt;- knime.flow.in[[&quot;plot_save&quot;]]%%00010%%00010knime.flow.in[[&quot;plot_save&quot;]] &lt;- data_long %&gt;%%%00010  plot_ly(type = 'violin') %&gt;%%%00010  add_trace(%%00010    x = ~treatment[data_long$legend==list_legend[[1]]],%%00010    y = ~intensity[data_long$legend==list_legend[[1]]],%%00010    legendgroup = list_legend[[1]],%%00010    scalegroup = list_legend[[1]],%%00010    name = list_legend[[1]],%%00010    side = 'negative',%%00010    box = list(visible = T),%%00010    meanline = list(visible = T),%%00010    color = I(color_left),%%00010    line = list(color = color_left)) %&gt;%%%00010  add_trace(%%00010    x = ~treatment[data_long$legend == list_legend[[2]]],%%00010    y = ~intensity[data_long$legend == list_legend[[2]]],%%00010    legendgroup = list_legend[[2]],%%00010    scalegroup = list_legend[[2]],%%00010    name = list_legend[[2]],%%00010    side = 'positive',%%00010    box = list(visible = T),%%00010    meanline = list(visible = T),%%00010    color = I(color_right),%%00010    line = list(color = color_right)) %&gt;% %%00010  layout(%%00010    title = paste(&quot;Violin plot (splitted, interactive) &lt;br&gt;&quot;, knime.flow.in[[&quot;graph_title&quot;]]),%%00010    xaxis = list(title = knime.flow.in[[&quot;x_axis_label&quot;]], type = 'category'),%%00010    yaxis = list(title = knime.flow.in[[&quot;y_axis_label&quot;]], zeroline = F),%%00010    violingap = 0.5,%%00010    violingroupgap = 0,%%00010    violinmode = 'overlay')%%00010%%00010if (knime.flow.in[[&quot;view_plot&quot;]] == 1) knime.flow.in[[&quot;plot_save&quot;]]%%00010%%00010# plot saving%%00010# checks if user provided .html or not, if not, it will automatically append it to the name of file-to-be-saved%%00010if (grepl(&quot;.html&quot;, pom, fixed=TRUE) == TRUE) {%%00010 %%00009f1 &lt;- paste(knime.flow.in[[&quot;plot_path&quot;]], pom, sep=&quot;&quot;, collapse = NULL)%%00010} else {%%00010%%00009f &lt;- paste(pom, &quot;.html&quot;, sep=&quot;&quot;, collapse = NULL)%%00010%%00009f1 &lt;- paste(knime.flow.in[[&quot;plot_path&quot;]], f, sep=&quot;&quot;, collapse = NULL)%%00010}%%00010%%00010htmlwidgets::saveWidget(as.widget(knime.flow.in[[&quot;plot_save&quot;]]), f1, selfcontained=FALSE)%%00010%%00010# output is the original dataframe%%00010knime.out &lt;- data%%00010"/>
        <entry key="templateUUID" type="xstring" isnull="true" value=""/>
        <entry key="version" type="xstring" value="version 1.x"/>
        <entry key="Output non numbers (NaN, Inf, -Inf) as missing cells" type="xboolean" value="false"/>
        <entry key="sendRowNames" type="xboolean" value="true"/>
        <entry key="sendBatchSize" type="xint" value="10000"/>
        <entry key="knimeInType" type="xstring" value="data.frame"/>
        <entry key="overwriteRHome" type="xboolean" value="false"/>
        <entry key="rHome" type="xstring" value="/home/knimeuser/.Renv/4.2.0/4.5.2a/lib/R"/>
        <entry key="useRPathHome" type="xboolean" value="true"/>
        <entry key="condaVariableName" type="xstring" isnull="true" value=""/>
    </config>
    <config key="variables">
        <entry key="version" type="xstring" value="V_2019_09_13"/>
        <config key="tree">
            <config key="rHome">
                <entry key="used_variable" type="xstring" value="Rcommand"/>
                <entry key="exposed_variable" type="xstring" isnull="true" value=""/>
            </config>
        </config>
    </config>
    <config key="nodeAnnotation">
        <entry key="text" type="xstring" value="create plot"/>
        <entry key="bgcolor" type="xint" value="16777215"/>
        <entry key="x-coordinate" type="xint" value="549"/>
        <entry key="y-coordinate" type="xint" value="279"/>
        <entry key="width" type="xint" value="142"/>
        <entry key="height" type="xint" value="17"/>
        <entry key="alignment" type="xstring" value="CENTER"/>
        <entry key="borderSize" type="xint" value="0"/>
        <entry key="borderColor" type="xint" value="16777215"/>
        <entry key="defFontSize" type="xint" value="10"/>
        <entry key="annotation-version" type="xint" value="20151123"/>
        <config key="styles">
            <config key="style_0">
                <entry key="start" type="xint" value="0"/>
                <entry key="length" type="xint" value="11"/>
                <entry key="fontname" type="xstring" value="Sans"/>
                <entry key="fontstyle" type="xint" value="0"/>
                <entry key="fontsize" type="xint" value="10"/>
                <entry key="fgcolor" type="xint" value="0"/>
            </config>
        </config>
    </config>
    <entry key="customDescription" type="xstring" isnull="true" value=""/>
    <entry key="state" type="xstring" value="IDLE"/>
    <entry key="factory" type="xstring" value="org.knime.r.RSnippetNodeFactory"/>
    <entry key="node-name" type="xstring" value="R Snippet"/>
    <entry key="node-bundle-name" type="xstring" value="KNIME R-Project nodes"/>
    <entry key="node-bundle-symbolic-name" type="xstring" value="org.knime.r"/>
    <entry key="node-bundle-vendor" type="xstring" value="KNIME AG, Zurich, Switzerland"/>
    <entry key="node-bundle-version" type="xstring" value="4.5.2.v202203171119"/>
    <entry key="node-feature-name" type="xstring" value="KNIME Interactive R Statistics Integration"/>
    <entry key="node-feature-symbolic-name" type="xstring" value="org.knime.features.r.feature.group"/>
    <entry key="node-feature-vendor" type="xstring" value="KNIME AG, Zurich, Switzerland"/>
    <entry key="node-feature-version" type="xstring" value="4.5.2.v202203171119"/>
    <config key="factory_settings"/>
    <entry key="name" type="xstring" value="R Snippet"/>
    <entry key="hasContent" type="xboolean" value="false"/>
    <entry key="isInactive" type="xboolean" value="false"/>
    <config key="ports">
        <config key="port_1">
            <entry key="index" type="xint" value="1"/>
            <entry key="port_dir_location" type="xstring" isnull="true" value=""/>
        </config>
    </config>
    <config key="filestores">
        <entry key="file_store_location" type="xstring" isnull="true" value=""/>
        <entry key="file_store_id" type="xstring" isnull="true" value=""/>
    </config>
</config>
