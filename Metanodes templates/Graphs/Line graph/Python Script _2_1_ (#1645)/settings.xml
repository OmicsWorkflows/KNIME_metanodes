<?xml version="1.0" encoding="UTF-8"?>
<config xmlns="http://www.knime.org/2008/09/XMLConfig" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.knime.org/2008/09/XMLConfig http://www.knime.org/XMLConfig_2008_09.xsd" key="settings.xml">
<entry key="node_file" type="xstring" value="settings.xml"/>
<config key="flow_stack"/>
<config key="internal_node_subsettings">
<entry key="memory_policy" type="xstring" value="CacheSmallInMemory"/>
</config>
<config key="model">
<entry key="sourceCode" type="xstring" value="import pandas as pd%%00010import numpy as np%%00010%%00010# Split design string into a list%%00010design = flow_variables['design_string'].split(',')%%00010%%00010# Get and compare numbers of columns%%00010x_ncol = len(input_table_1.columns)%%00010y_ncol = len(input_table_2.columns)%%00010%%00010if x_ncol == y_ncol:%%00010%%00009pass%%00010elif x_ncol == 1:%%00010%%00009input_table_1 = pd.DataFrame(np.repeat(input_table_1.to_numpy(), y_ncol, axis = 1), columns = input_table_2.columns)%%00010elif y_ncol == 1:%%00010%%00009input_table_2 = pd.DataFrame(np.repeat(input_table_2.to_numpy(), x_ncol, axis = 1), columns = input_table_1.columns)%%00010else:%%00010%%00009raise Exception(&quot;Invalid number of columns&quot;)%%00010%%00010# Rename columns based on experimental design, if applicable%%00010if flow_variables['use_design'] == 1:%%00010%%00009if len(flow_variables['design']) == 0:%%00010%%00009%%00009raise Exception(&quot;No experimental design provided&quot;)%%00010%%00009else:%%00010%%00009%%00009input_table_1.columns = design%%00010%%00009%%00009input_table_2.columns = design%%00010%%00010# Turn columns into long format%%00010input_table_1['id'] = input_table_1.index%%00010input_table_2['id'] = input_table_2.index%%00010%%00010input_table_1_long = input_table_1.melt(id_vars='id')%%00010input_table_2_long = input_table_2.melt(id_vars='id')%%00010%%00010input_table_1_long.columns = ['id','Sample','X']%%00010input_table_2_long.columns = ['id','Sample','Y']%%00010%%00010# Join columns%%00010output_table = input_table_1_long.join(input_table_2_long[['Y']]).drop(columns = ['id'])"/>
<entry key="rowLimit" type="xint" value="1000"/>
<entry key="pythonVersionOption" type="xstring" value="python3"/>
<entry key="python2Command" type="xstring" value=""/>
<entry key="python3Command" type="xstring" value=""/>
<entry key="chunkSize" type="xint" value="500000"/>
<entry key="convertMissingToPython" type="xboolean" value="false"/>
<entry key="convertMissingFromPython" type="xboolean" value="false"/>
<entry key="sentinelOption" type="xstring" value="MIN_VAL"/>
<entry key="sentinelValue" type="xint" value="0"/>
</config>
<config key="nodeAnnotation">
<entry key="text" type="xstring" value="create long table%%00010with both X and Y columns"/>
<entry key="bgcolor" type="xint" value="16777215"/>
<entry key="x-coordinate" type="xint" value="792"/>
<entry key="y-coordinate" type="xint" value="319"/>
<entry key="width" type="xint" value="178"/>
<entry key="height" type="xint" value="34"/>
<entry key="alignment" type="xstring" value="CENTER"/>
<entry key="borderSize" type="xint" value="0"/>
<entry key="borderColor" type="xint" value="16777215"/>
<entry key="defFontSize" type="xint" value="10"/>
<entry key="annotation-version" type="xint" value="20151123"/>
<config key="styles">
<config key="style_0">
<entry key="start" type="xint" value="0"/>
<entry key="length" type="xint" value="43"/>
<entry key="fontname" type="xstring" value="Sans"/>
<entry key="fontstyle" type="xint" value="0"/>
<entry key="fontsize" type="xint" value="10"/>
<entry key="fgcolor" type="xint" value="0"/>
</config>
</config>
</config>
<entry key="customDescription" type="xstring" isnull="true" value=""/>
<entry key="state" type="xstring" value="IDLE"/>
<entry key="factory" type="xstring" value="org.knime.python2.nodes.script2in1out.Python2Script2In1OutNodeFactory"/>
<entry key="node-name" type="xstring" value="Python Script (2⇒1)"/>
<entry key="node-bundle-name" type="xstring" value="KNIME Python nodes"/>
<entry key="node-bundle-symbolic-name" type="xstring" value="org.knime.python2.nodes"/>
<entry key="node-bundle-vendor" type="xstring" value="KNIME AG, Zurich, Switzerland"/>
<entry key="node-bundle-version" type="xstring" value="4.1.3.v202005112253"/>
<entry key="node-feature-name" type="xstring" value="KNIME Python Integration"/>
<entry key="node-feature-symbolic-name" type="xstring" value="org.knime.features.python2.feature.group"/>
<entry key="node-feature-vendor" type="xstring" value="KNIME AG, Zurich, Switzerland"/>
<entry key="node-feature-version" type="xstring" value="4.1.3.v202005112253"/>
<config key="factory_settings"/>
<entry key="name" type="xstring" value="Python Script (2⇒1)"/>
<entry key="hasContent" type="xboolean" value="false"/>
<entry key="isInactive" type="xboolean" value="false"/>
<config key="ports">
<config key="port_1">
<entry key="index" type="xint" value="1"/>
<entry key="port_dir_location" type="xstring" isnull="true" value=""/>
</config>
</config>
<config key="filestores">
<entry key="file_store_location" type="xstring" isnull="true" value=""/>
<entry key="file_store_id" type="xstring" isnull="true" value=""/>
</config>
</config>
