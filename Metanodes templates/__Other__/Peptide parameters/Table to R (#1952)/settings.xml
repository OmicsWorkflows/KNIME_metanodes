<?xml version="1.0" encoding="UTF-8"?>
<config xmlns="http://www.knime.org/2008/09/XMLConfig" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.knime.org/2008/09/XMLConfig http://www.knime.org/XMLConfig_2008_09.xsd" key="settings.xml">
    <entry key="node_file" type="xstring" value="settings.xml"/>
    <config key="flow_stack"/>
    <config key="internal_node_subsettings">
        <entry key="memory_policy" type="xstring" value="CacheSmallInMemory"/>
    </config>
    <config key="model">
        <entry key="script" type="xstring" value="library(Peptides)%%00010df &lt;- knime.in%%00010df[,1] &lt;- as.character(df[,1])%%00010%%00010# new functions for amino acid composition%%00010## checks if all characters are AA characters%%00010aaCheck &lt;- function(x){%%00010  if(nchar(x) &gt; 1) {%%00010    x &lt;- toupper(x)%%00010    x &lt;- gsub(pattern = &quot;[[:space:]]+&quot;,replacement = &quot;&quot;, x)%%00010    x &lt;- strsplit(x, split = &quot;&quot;)%%00010  } else {%%00010    return(NA)%%00010  }%%00010  check &lt;- unlist(lapply(x, function(y){%%00010    all(y%in%c(&quot;A&quot; ,&quot;C&quot; ,&quot;D&quot; ,&quot;E&quot; ,&quot;F&quot; ,&quot;G&quot; ,&quot;H&quot; ,&quot;I&quot; ,&quot;K&quot; ,&quot;L&quot; ,&quot;M&quot; ,&quot;N&quot; ,&quot;P&quot; ,&quot;Q&quot; ,&quot;R&quot; ,&quot;S&quot; ,&quot;T&quot; ,&quot;V&quot; ,&quot;W&quot; ,&quot;Y&quot;, &quot;-&quot;))%%00010  }))%%00010  %%00010  if(check) {%%00010  %%00009return(x)%%00010  } else {%%00010  %%00009return(NA)%%00010  }%%00010}%%00010%%00010## counts composition%%00010amino_acids &lt;- function(seq){%%00010  # Make a frequencies table%%00010  seq &lt;- lapply(seq, function(seq){table(unlist(seq))})%%00010  # Applying composition function%%00010  aacomp &lt;- lapply(seq, function(seq){%%00010    # Classify amino acids in a particular class and sum the absolute frequencies%%00010    nonpolar&lt;-paste(&quot;nonpolar:&quot;,sum(seq[c(&quot;A&quot;,&quot;F&quot;,&quot;G&quot;,&quot;I&quot;,&quot;L&quot;,&quot;M&quot;,&quot;P&quot;,&quot;V&quot;,&quot;W&quot;)], na.rm = TRUE), sep=&quot;&quot;)%%00010    polar&lt;-paste(&quot;polar:&quot;,sum(seq[c(&quot;B&quot;,&quot;C&quot;,&quot;N&quot;,&quot;Q&quot;,&quot;S&quot;,&quot;T&quot;,&quot;Y&quot;,&quot;Z&quot;)], na.rm = TRUE), sep=&quot;&quot;)%%00010    basic&lt;-paste(&quot;basic:&quot;,sum(seq[c(&quot;H&quot;,&quot;K&quot;,&quot;R&quot;)], na.rm = TRUE), sep=&quot;&quot;)%%00010    acidic&lt;-paste(&quot;acidic:&quot;,sum(seq[c(&quot;D&quot;,&quot;E&quot;)], na.rm = TRUE), sep=&quot;&quot;)%%00010    # Output string%%00010    output &lt;- paste(nonpolar,polar,basic,acidic, sep=&quot;;&quot;)%%00010    return(output)%%00010  })%%00010  # Return output matrix rounded to 3 decimals%%00010  return(unlist(aacomp))%%00010}%%00010%%00010# check validity of data in column%%00010df$seq &lt;- sapply(df[,1], aaCheck, USE.NAMES = FALSE)%%00010%%00010# create parameters character vector%%00010parameters &lt;- unlist(strsplit(knime.flow.in[[&quot;parameters&quot;]], &quot;,&quot;))%%00010%%00010# calculate selected parameters%%00010if(&quot;MW&quot; %in% parameters) df$MW &lt;- ifelse(is.na(df$seq), NA, mw(df$seq))%%00010if(&quot;GRAVY&quot; %in% parameters) df$GRAVY &lt;- ifelse(is.na(df$seq), NA, hydrophobicity(df$seq))%%00010if(&quot;pI&quot; %in% parameters) df$pI &lt;- ifelse(is.na(df$seq), NA, pI(df$seq))%%00010if(&quot;AA count&quot; %in% parameters) df$AA_count &lt;- ifelse(is.na(df$seq), NA, lengths(df$seq))%%00010if(&quot;AA composition&quot; %in% parameters) df$AA_composition  &lt;- ifelse(is.na(df$seq), NA, amino_acids(df$seq))%%00010"/>
        <entry key="templateUUID" type="xstring" isnull="true" value=""/>
        <entry key="version" type="xstring" value="version 1.x"/>
        <entry key="Output non numbers (NaN, Inf, -Inf) as missing cells" type="xboolean" value="false"/>
        <entry key="sendRowNames" type="xboolean" value="true"/>
        <entry key="sendBatchSize" type="xint" value="10000"/>
        <entry key="knimeInType" type="xstring" value="data.frame"/>
        <entry key="overwriteRHome" type="xboolean" value="false"/>
        <entry key="rHome" type="xstring" value=""/>
        <entry key="useRPathHome" type="xboolean" value="true"/>
        <entry key="condaVariableName" type="xstring" isnull="true" value=""/>
    </config>
    <config key="nodeAnnotation">
        <entry key="text" type="xstring" value="calculate peptide%%00010parameters"/>
        <entry key="bgcolor" type="xint" value="16777215"/>
        <entry key="x-coordinate" type="xint" value="130"/>
        <entry key="y-coordinate" type="xint" value="259"/>
        <entry key="width" type="xint" value="142"/>
        <entry key="height" type="xint" value="32"/>
        <entry key="alignment" type="xstring" value="CENTER"/>
        <entry key="borderSize" type="xint" value="0"/>
        <entry key="borderColor" type="xint" value="16777215"/>
        <entry key="defFontSize" type="xint" value="10"/>
        <entry key="annotation-version" type="xint" value="20151123"/>
        <config key="styles">
            <config key="style_0">
                <entry key="start" type="xint" value="0"/>
                <entry key="length" type="xint" value="1"/>
                <entry key="fontname" type="xstring" value="Sans"/>
                <entry key="fontstyle" type="xint" value="0"/>
                <entry key="fontsize" type="xint" value="10"/>
                <entry key="fgcolor" type="xint" value="0"/>
            </config>
            <config key="style_1">
                <entry key="start" type="xint" value="1"/>
                <entry key="length" type="xint" value="27"/>
                <entry key="fontname" type="xstring" value="Sans"/>
                <entry key="fontstyle" type="xint" value="0"/>
                <entry key="fontsize" type="xint" value="10"/>
                <entry key="fgcolor" type="xint" value="0"/>
            </config>
        </config>
    </config>
    <entry key="customDescription" type="xstring" isnull="true" value=""/>
    <entry key="state" type="xstring" value="CONFIGURED"/>
    <entry key="factory" type="xstring" value="org.knime.r.TableToRNodeFactory"/>
    <entry key="node-name" type="xstring" value="Table to R"/>
    <entry key="node-bundle-name" type="xstring" value="KNIME R-Project nodes"/>
    <entry key="node-bundle-symbolic-name" type="xstring" value="org.knime.r"/>
    <entry key="node-bundle-vendor" type="xstring" value="KNIME AG, Zurich, Switzerland"/>
    <entry key="node-bundle-version" type="xstring" value="4.7.0.v202206271529"/>
    <entry key="node-feature-name" type="xstring" value="KNIME Interactive R Statistics Integration"/>
    <entry key="node-feature-symbolic-name" type="xstring" value="org.knime.features.r.feature.group"/>
    <entry key="node-feature-vendor" type="xstring" value="KNIME AG, Zurich, Switzerland"/>
    <entry key="node-feature-version" type="xstring" value="4.7.0.v202211090002"/>
    <config key="factory_settings"/>
    <entry key="name" type="xstring" value="Table to R"/>
    <entry key="hasContent" type="xboolean" value="false"/>
    <entry key="isInactive" type="xboolean" value="false"/>
    <config key="ports">
        <config key="port_1">
            <entry key="index" type="xint" value="1"/>
            <entry key="port_dir_location" type="xstring" isnull="true" value=""/>
        </config>
    </config>
    <config key="filestores">
        <entry key="file_store_location" type="xstring" isnull="true" value=""/>
        <entry key="file_store_id" type="xstring" isnull="true" value=""/>
    </config>
</config>
