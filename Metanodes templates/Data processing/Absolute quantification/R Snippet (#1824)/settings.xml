<?xml version="1.0" encoding="UTF-8"?>
<config xmlns="http://www.knime.org/2008/09/XMLConfig" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.knime.org/2008/09/XMLConfig http://www.knime.org/XMLConfig_2008_09.xsd" key="settings.xml">
    <entry key="node_file" type="xstring" value="settings.xml"/>
    <config key="flow_stack"/>
    <config key="internal_node_subsettings">
        <entry key="memory_policy" type="xstring" value="CacheSmallInMemory"/>
    </config>
    <config key="model">
        <entry key="overwriteRHome" type="xboolean" value="false"/>
        <entry key="sendBatchSize" type="xint" value="10000"/>
        <entry key="useRPathHome" type="xboolean" value="true"/>
        <entry key="templateUUID" type="xstring" isnull="true" value=""/>
        <entry key="sendRowNames" type="xboolean" value="true"/>
        <entry key="knimeInType" type="xstring" value="data.frame"/>
        <entry key="rHome" type="xstring" value="/home/knimeuser/.Renv/4.2.0/4.5.2a/lib/R"/>
        <entry key="condaVariableName" type="xstring" isnull="true" value=""/>
        <entry key="Output non numbers (NaN, Inf, -Inf) as missing cells" type="xboolean" value="false"/>
        <entry key="version" type="xstring" value="version 1.x"/>
        <entry key="script" type="xstring" value="library(dplyr)%%00010library(magrittr)%%00010library(tidyr)%%00010%%00010input &lt;- knime.in%%00010%%00010df &lt;- data.frame(PG = sapply(input$PG, as.character),%%00010%%00009%%00009%%00009  full_sequence = sapply(input$full_sequence, as.character),%%00010%%00009%%00009%%00009  stringsAsFactors = FALSE)%%00010df &lt;- na.omit(df)%%00010%%00010# adjust variables for digestion pattern%%00010adjust_pattern &lt;- function(s){%%00010%%00009if(nchar(s) &gt; 1){%%00010%%00009%%00009s &lt;- paste0('[',s,']')%%00010%%00009}%%00010%%00009return(s)%%00010}%%00010%%00010len_min &lt;- as.integer(unlist(strsplit(knime.flow.in[[&quot;obs_pep_limits&quot;]], ';'))[1])%%00010len_max &lt;- as.integer(unlist(strsplit(knime.flow.in[[&quot;obs_pep_limits&quot;]], ';'))[2])%%00010%%00010c_a &lt;- knime.flow.in[[&quot;cut_after&quot;]]%%00010c_b &lt;- knime.flow.in[[&quot;cut_before&quot;]]%%00010s_a &lt;- knime.flow.in[[&quot;skip_after&quot;]]%%00010s_b &lt;- knime.flow.in[[&quot;skip_before&quot;]]%%00010%%00010c_a &lt;- adjust_pattern(c_a)%%00010c_b &lt;- adjust_pattern(c_b)%%00010s_a &lt;- adjust_pattern(s_a)%%00010s_b &lt;- adjust_pattern(s_b) %%00010%%00010seq &lt;- df$full_sequence[1]%%00010%%00010# function for calculating observable peptides%%00010observable_peptides &lt;- function(seq, max, min, cut_before, cut_after, skip_before, skip_after) {%%00010  cut &lt;- numeric()%%00010  skip &lt;- numeric()%%00010  %%00010  if (nchar(knime.flow.in[[&quot;cut_after&quot;]]) &gt; 0) cut &lt;- c(cut, unlist(gregexpr(cut_after, seq)))%%00010  if (nchar(knime.flow.in[[&quot;cut_before&quot;]]) &gt; 0) cut &lt;- c(cut, unlist(gregexpr(cut_before, seq))-1)%%00010  if (nchar(knime.flow.in[[&quot;skip_after&quot;]]) &gt; 0) skip &lt;- c(skip, unlist(gregexpr(skip_after, seq)))%%00010  if (nchar(knime.flow.in[[&quot;skip_before&quot;]]) &gt; 0) skip &lt;- c(skip, unlist(gregexpr(skip_before, seq))-1)%%00010  %%00010  cut &lt;- unique(cut)%%00010  skip &lt;- unique(skip)%%00010%%00010  cleavage &lt;- setdiff(cut, skip)%%00010  %%00010  short_peptides &lt;- data.frame(start = c(0, cleavage + 1),%%00010                               end = c(cleavage, nchar(seq))) %&gt;%%%00010    mutate(peptide = substring(seq, start, end)) %&gt;%%%00010    select(peptide) %&gt;%%%00010    unlist() %&gt;%%%00010    unname()%%00010  %%00010  long_peptides &lt;- character()%%00010  i &lt;- 1%%00010  %%00010  while(i &lt; length(short_peptides)) {%%00010    j &lt;- i+1%%00010    %%00010    while (j &lt;= length(short_peptides)) {%%00010      temp &lt;- paste0(short_peptides[i:j], collapse = '')%%00010      %%00010      if (nchar(temp) &lt;= max){%%00010        long_peptides[length(long_peptides)+1] &lt;- temp%%00010        j &lt;- j+1%%00010      } else {%%00010        j &lt;- length(short_peptides)+1%%00010      }%%00010    }%%00010    %%00010    i &lt;- i+1%%00010  }%%00010  %%00010  all_peptides &lt;- c(short_peptides, long_peptides)%%00010  final_peptides &lt;- all_peptides[which(nchar(all_peptides) &gt;= min &amp; nchar(all_peptides) &lt;= max)]%%00010  %%00010  return(length(final_peptides))%%00010}%%00010%%00010# calculate number of observable peptides%%00010df$observable_peptides &lt;- unname(sapply(df$full_sequence, %%00010%%00009%%00009function(x) {%%00010%%00009%%00009%%00009temp &lt;- unlist(strsplit(x, ';'))%%00010%%00009%%00009%%00009temp &lt;- temp[1]%%00010%%00009%%00009%%00009observable_peptides(temp, len_max, len_min, c_b, c_a, s_b, s_a)%%00010%%00009}))%%00010%%00010df &lt;- select(df, -full_sequence)%%00010knime.out &lt;- df"/>
    </config>
    <config key="variables">
        <config key="tree">
            <config key="rHome">
                <entry key="used_variable" type="xstring" value="Rcommand"/>
                <entry key="exposed_variable" type="xstring" isnull="true" value=""/>
            </config>
        </config>
        <entry key="version" type="xstring" value="V_2019_09_13"/>
    </config>
    <config key="nodeAnnotation">
        <entry key="text" type="xstring" value="calculates number%%00010of observable peptides"/>
        <entry key="bgcolor" type="xint" value="16777215"/>
        <entry key="x-coordinate" type="xint" value="1326"/>
        <entry key="y-coordinate" type="xint" value="579"/>
        <entry key="width" type="xint" value="149"/>
        <entry key="height" type="xint" value="32"/>
        <entry key="alignment" type="xstring" value="CENTER"/>
        <entry key="borderSize" type="xint" value="0"/>
        <entry key="borderColor" type="xint" value="16777215"/>
        <entry key="defFontSize" type="xint" value="10"/>
        <entry key="annotation-version" type="xint" value="20151123"/>
        <config key="styles">
            <config key="style_0">
                <entry key="start" type="xint" value="0"/>
                <entry key="length" type="xint" value="40"/>
                <entry key="fontname" type="xstring" value="Sans"/>
                <entry key="fontstyle" type="xint" value="0"/>
                <entry key="fontsize" type="xint" value="10"/>
                <entry key="fgcolor" type="xint" value="0"/>
            </config>
        </config>
    </config>
    <entry key="customDescription" type="xstring" isnull="true" value=""/>
    <entry key="state" type="xstring" value="IDLE"/>
    <entry key="factory" type="xstring" value="org.knime.r.RSnippetNodeFactory"/>
    <entry key="node-name" type="xstring" value="R Snippet"/>
    <entry key="node-bundle-name" type="xstring" value="KNIME R-Project nodes"/>
    <entry key="node-bundle-symbolic-name" type="xstring" value="org.knime.r"/>
    <entry key="node-bundle-vendor" type="xstring" value="KNIME AG, Zurich, Switzerland"/>
    <entry key="node-bundle-version" type="xstring" value="4.6.0.v202205161326"/>
    <entry key="node-feature-name" type="xstring" value="KNIME Interactive R Statistics Integration"/>
    <entry key="node-feature-symbolic-name" type="xstring" value="org.knime.features.r.feature.group"/>
    <entry key="node-feature-vendor" type="xstring" value="KNIME AG, Zurich, Switzerland"/>
    <entry key="node-feature-version" type="xstring" value="4.6.0.v202205161326"/>
    <config key="factory_settings"/>
    <entry key="name" type="xstring" value="R Snippet"/>
    <entry key="hasContent" type="xboolean" value="false"/>
    <entry key="isInactive" type="xboolean" value="false"/>
    <config key="ports">
        <config key="port_1">
            <entry key="index" type="xint" value="1"/>
            <entry key="port_dir_location" type="xstring" isnull="true" value=""/>
        </config>
    </config>
    <config key="filestores">
        <entry key="file_store_location" type="xstring" isnull="true" value=""/>
        <entry key="file_store_id" type="xstring" isnull="true" value=""/>
    </config>
</config>
