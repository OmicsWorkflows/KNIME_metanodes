<?xml version="1.0" encoding="UTF-8"?>
<config xmlns="http://www.knime.org/2008/09/XMLConfig" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.knime.org/2008/09/XMLConfig http://www.knime.org/XMLConfig_2008_09.xsd" key="settings.xml">
<entry key="node_file" type="xstring" value="settings.xml"/>
<config key="flow_stack"/>
<config key="internal_node_subsettings">
<entry key="memory_policy" type="xstring" value="CacheSmallInMemory"/>
</config>
<config key="model">
<entry key="sourceCode" type="xstring" value="# performs data normalization of original dataset using provided normalization factors%%00010%%00010import pandas%%00010## data import for KNIME version%%00010data = input_table_1%%00010%%00010# saves the initial order of columns to be normalized %%00010# so they can be written in the same order for more convience%%00010data_columns = data.columns%%00010%%00010# creates empty dataframe to be filled by norm. factors%%00010normalization_factors = input_table_2%%00010%%00010# normalization factors dataframe index%%00010normalization_factors_columns = normalization_factors.columns%%00010%%00010%%00010# checks that column indexes are equal in both dataframes and raises exception if not%%00010if not sorted(list(data_columns.values)) == sorted(list(normalization_factors_columns.values)):%%00010%%00009raise ValueError(&quot;Names of the columns to be processed and normalization factors columns do not match! Please inspect the column names.&quot;)%%00010%%00010# normalize the data using the calculated normalization factors and using the way it has been requested%%00010# (factors are extracted as the last row in the provided dataframe - row index (.iloc) = -1)%%00010%%00010if flow_variables['normalize_operation'] == 'value x factor':%%00010%%00009data_normalized = data * normalization_factors.iloc[-1]%%00010elif flow_variables['normalize_operation'] == 'value / factor':%%00010%%00009data_normalized = data / normalization_factors.iloc[-1]%%00010elif flow_variables['normalize_operation'] == 'factor / value':%%00010%%00009data_normalized = normalization_factors.iloc[-1] / data%%00010elif flow_variables['normalize_operation'] == 'value - factor':%%00010%%00009data_normalized = data - normalization_factors.iloc[-1]%%00010elif flow_variables['normalize_operation'] == 'value + factor':%%00010%%00009data_normalized = data + normalization_factors.iloc[-1]%%00010%%00010# reindexes the columns to be in the same order as in the beginning%%00010# (e.g. in case norm. factors are in different order and columns are mapped and resorted automatically...)%%00010data_normalized_reindexed = data_normalized.reindex_axis(data_columns, axis = 1)%%00010%%00010## outputs normalized data%%00010output_table = data_normalized_reindexed%%00010"/>
<entry key="rowLimit" type="xint" value="1000"/>
<entry key="pythonVersionOption" type="xstring" value="PYTHON3"/>
<entry key="convertMissingToPython" type="xboolean" value="false"/>
<entry key="convertMissingFromPython" type="xboolean" value="false"/>
<entry key="sentinelOption" type="xstring" value="MIN_VAL"/>
<entry key="sentinelValue" type="xint" value="0"/>
<entry key="chunkSize" type="xint" value="500000"/>
<entry key="python2Command" type="xstring" value=""/>
<entry key="python3Command" type="xstring" value=""/>
</config>
<config key="nodeAnnotation">
<entry key="text" type="xstring" value="columns based %%00013%%00010normalization factors %%00013%%00010application"/>
<entry key="bgcolor" type="xint" value="16777215"/>
<entry key="x-coordinate" type="xint" value="489"/>
<entry key="y-coordinate" type="xint" value="399"/>
<entry key="width" type="xint" value="143"/>
<entry key="height" type="xint" value="51"/>
<entry key="alignment" type="xstring" value="CENTER"/>
<entry key="borderSize" type="xint" value="0"/>
<entry key="borderColor" type="xint" value="16777215"/>
<entry key="defFontSize" type="xint" value="9"/>
<entry key="annotation-version" type="xint" value="20151123"/>
<config key="styles"/>
</config>
<entry key="customDescription" type="xstring" isnull="true" value=""/>
<entry key="state" type="xstring" value="IDLE"/>
<entry key="factory" type="xstring" value="org.knime.python2.nodes.script2in1out.Python2Script2In1OutNodeFactory"/>
<entry key="node-name" type="xstring" value="Python Script (2⇒1)"/>
<entry key="node-bundle-name" type="xstring" value="KNIME Python nodes"/>
<entry key="node-bundle-symbolic-name" type="xstring" value="org.knime.python2.nodes"/>
<entry key="node-bundle-vendor" type="xstring" value="KNIME AG, Zurich, Switzerland"/>
<entry key="node-bundle-version" type="xstring" value="3.7.2.v201904170931"/>
<entry key="node-feature-name" type="xstring" value="KNIME Python Integration"/>
<entry key="node-feature-symbolic-name" type="xstring" value="org.knime.features.python2.feature.group"/>
<entry key="node-feature-vendor" type="xstring" value="KNIME AG, Zurich, Switzerland"/>
<entry key="node-feature-version" type="xstring" value="3.7.2.v201904170931"/>
<config key="factory_settings"/>
<entry key="name" type="xstring" value="Python Script (2⇒1)"/>
<entry key="hasContent" type="xboolean" value="false"/>
<entry key="isInactive" type="xboolean" value="false"/>
<config key="ports">
<config key="port_1">
<entry key="index" type="xint" value="1"/>
<entry key="port_dir_location" type="xstring" isnull="true" value=""/>
</config>
</config>
<config key="filestores">
<entry key="file_store_location" type="xstring" isnull="true" value=""/>
<entry key="file_store_id" type="xstring" isnull="true" value=""/>
</config>
</config>
