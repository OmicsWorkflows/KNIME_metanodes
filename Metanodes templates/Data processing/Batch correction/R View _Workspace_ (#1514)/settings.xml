<?xml version="1.0" encoding="UTF-8"?>
<config xmlns="http://www.knime.org/2008/09/XMLConfig" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.knime.org/2008/09/XMLConfig http://www.knime.org/XMLConfig_2008_09.xsd" key="settings.xml">
    <entry key="node_file" type="xstring" value="settings.xml"/>
    <config key="flow_stack"/>
    <config key="internal_node_subsettings">
        <entry key="memory_policy" type="xstring" value="CacheSmallInMemory"/>
    </config>
    <config key="model">
        <entry key="Image width" type="xint" value="800"/>
        <entry key="Image height" type="xint" value="800"/>
        <entry key="Image resolution" type="xstring" value="100"/>
        <entry key="Image background color" type="xstring" value="#ffffff"/>
        <entry key="Text point size" type="xint" value="12"/>
        <config key="R settings">
            <entry key="script" type="xstring" value="# scale data%%00010before &lt;- scale(df, center = TRUE, scale = TRUE)%%00010after &lt;- scale(df_combat, center = TRUE, scale = TRUE)%%00010%%00010# get new column names%%00010columns &lt;- trimws(unlist(strsplit(knime.flow.in[[&quot;columns&quot;]], &quot;,&quot;)))%%00010%%00010# perform UMAP%%00010umap.defaults$random_state &lt;- 123%%00010if(ncol(before) &lt; 15) umap.defaults$n_neighbors &lt;- ncol(before)%%00010%%00010umap_before &lt;- umap(t(before), config = umap.defaults)%%00010umap_after &lt;- umap(t(after), config = umap.defaults)%%00010%%00010# UMAP df%%00010umap_df_before &lt;- data.frame(Column = columns,%%00010%%00009%%00009%%00009%%00009%%00009    UMAP1 = umap_before$layout[,1],%%00010%%00009%%00009%%00009%%00009%%00009    UMAP2 = umap_before$layout[,2],%%00010%%00009%%00009%%00009%%00009%%00009    Batch = batch,%%00010%%00009%%00009%%00009%%00009%%00009    Sample = design,%%00010%%00009%%00009%%00009%%00009%%00009    Correction = rep(&quot;Before&quot;, times = nrow(umap_before$layout))) %&gt;%%%00010%%00009%%00009%%00009    gather(-Column, -UMAP1, -UMAP2, -Correction, key = &quot;Effect&quot;, value = &quot;Group&quot;)%%00010%%00010umap_df_after &lt;- data.frame(Column = columns,%%00010%%00009%%00009%%00009%%00009%%00009   UMAP1 = umap_after$layout[,1],%%00010%%00009%%00009%%00009%%00009%%00009   UMAP2 = umap_after$layout[,2],%%00010%%00009%%00009%%00009%%00009%%00009   Batch = batch,%%00010%%00009%%00009%%00009%%00009%%00009   Sample = design,%%00010%%00009%%00009%%00009%%00009%%00009   Correction = rep(&quot;After&quot;, times = nrow(umap_after$layout))) %&gt;%%%00010%%00009%%00009%%00009   gather(-Column, -UMAP1, -UMAP2, -Correction, key = &quot;Effect&quot;, value = &quot;Group&quot;)%%00010%%00010umap_df &lt;- rbind(umap_df_after, umap_df_before)%%00010umap_df$Correction &lt;- factor(umap_df$Correction, levels = c(&quot;Before&quot;, &quot;After&quot;))%%00010%%00010# create plots%%00010p_sample &lt;- umap_df %&gt;%%%00010%%00009filter(Effect == &quot;Sample&quot;) %&gt;%%%00010%%00009ggplot(aes(x = UMAP1, y = UMAP2, colour = Group, label = Column)) +%%00010%%00009geom_point(size = 3) +%%00010%%00009geom_text_repel(size = 3, show.legend = FALSE, col = &quot;grey20&quot;) +%%00010%%00009theme_bw() +%%00010%%00009labs(title = &quot;UMAP projection of data table columns&quot;,%%00010%%00009%%00009colour = &quot;Sample&quot;) +%%00010%%00009scale_colour_viridis_d(direction = -1, end = 0.9) +%%00010%%00009facet_grid(.~Correction) + %%00010%%00009theme(legend.position = &quot;right&quot;,%%00010%%00009%%00009 strip.background = element_blank(),%%00010%%00009%%00009 legend.title = element_text(face = &quot;bold&quot;),%%00010%%00009%%00009 plot.title = element_text(face = &quot;bold&quot;, hjust = 0.5))%%00010%%00010p_batch &lt;- umap_df %&gt;%%%00010%%00009filter(Effect == &quot;Batch&quot;) %&gt;%%%00010%%00009ggplot(aes(x = UMAP1, y = UMAP2, colour = Group, label = Column)) +%%00010%%00009geom_point(size = 3) +%%00010%%00009geom_text_repel(size = 3, show.legend = FALSE, col = &quot;grey20&quot;) +%%00010%%00009theme_bw() +%%00010%%00009labs(colour = &quot;Batch&quot;) +%%00010%%00009scale_colour_viridis_d(direction = -1, end = 0.9) +%%00010%%00009facet_grid(.~Correction) + %%00010%%00009theme(legend.position = &quot;right&quot;,%%00010%%00009%%00009 strip.background = element_blank(),%%00010%%00009%%00009 legend.title = element_text(face = &quot;bold&quot;),%%00010%%00009%%00009 plot.title = element_text(face = &quot;bold&quot;, hjust = 0.5))%%00010%%00010grid.arrange(p_sample, p_batch, nrow = 2)"/>
            <entry key="templateUUID" type="xstring" isnull="true" value=""/>
            <entry key="version" type="xstring" value="version 1.x"/>
            <entry key="Output non numbers (NaN, Inf, -Inf) as missing cells" type="xboolean" value="false"/>
            <entry key="sendRowNames" type="xboolean" value="true"/>
            <entry key="sendBatchSize" type="xint" value="10000"/>
            <entry key="knimeInType" type="xstring" value="data.frame"/>
            <entry key="overwriteRHome" type="xboolean" value="false"/>
            <entry key="rHome" type="xstring" value=""/>
            <entry key="useRPathHome" type="xboolean" value="true"/>
            <entry key="condaVariableName" type="xstring" isnull="true" value=""/>
        </config>
        <entry key="Image type" type="xstring" value="PNG"/>
    </config>
    <config key="nodeAnnotation">
        <entry key="text" type="xstring" value="UMAP"/>
        <entry key="bgcolor" type="xint" value="16777215"/>
        <entry key="x-coordinate" type="xint" value="949"/>
        <entry key="y-coordinate" type="xint" value="739"/>
        <entry key="width" type="xint" value="142"/>
        <entry key="height" type="xint" value="17"/>
        <entry key="alignment" type="xstring" value="CENTER"/>
        <entry key="borderSize" type="xint" value="0"/>
        <entry key="borderColor" type="xint" value="16777215"/>
        <entry key="defFontSize" type="xint" value="10"/>
        <entry key="annotation-version" type="xint" value="20151123"/>
        <config key="styles"/>
    </config>
    <entry key="customDescription" type="xstring" isnull="true" value=""/>
    <entry key="state" type="xstring" value="IDLE"/>
    <entry key="factory" type="xstring" value="org.knime.r.RToViewNodeFactory"/>
    <entry key="node-name" type="xstring" value="R View (Workspace)"/>
    <entry key="node-bundle-name" type="xstring" value="KNIME R-Project nodes"/>
    <entry key="node-bundle-symbolic-name" type="xstring" value="org.knime.r"/>
    <entry key="node-bundle-vendor" type="xstring" value="KNIME AG, Zurich, Switzerland"/>
    <entry key="node-bundle-version" type="xstring" value="4.5.2.v202203171119"/>
    <entry key="node-feature-name" type="xstring" value="KNIME Interactive R Statistics Integration"/>
    <entry key="node-feature-symbolic-name" type="xstring" value="org.knime.features.r.feature.group"/>
    <entry key="node-feature-vendor" type="xstring" value="KNIME AG, Zurich, Switzerland"/>
    <entry key="node-feature-version" type="xstring" value="4.5.2.v202203171119"/>
    <config key="factory_settings"/>
    <entry key="name" type="xstring" value="R View (Workspace)"/>
    <entry key="hasContent" type="xboolean" value="false"/>
    <entry key="isInactive" type="xboolean" value="false"/>
    <config key="ports">
        <config key="port_1">
            <entry key="index" type="xint" value="1"/>
            <entry key="port_dir_location" type="xstring" isnull="true" value=""/>
        </config>
    </config>
    <config key="filestores">
        <entry key="file_store_location" type="xstring" isnull="true" value=""/>
        <entry key="file_store_id" type="xstring" isnull="true" value=""/>
    </config>
</config>
